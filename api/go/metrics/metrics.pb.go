// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metrics.proto

package metrics

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ZmetricTypes int32

const (
	ZmetricTypes_ZmNop    ZmetricTypes = 0
	ZmetricTypes_ZmDevice ZmetricTypes = 1
	ZmetricTypes_ZmApp    ZmetricTypes = 3
)

var ZmetricTypes_name = map[int32]string{
	0: "ZmNop",
	1: "ZmDevice",
	3: "ZmApp",
}

var ZmetricTypes_value = map[string]int32{
	"ZmNop":    0,
	"ZmDevice": 1,
	"ZmApp":    3,
}

func (x ZmetricTypes) String() string {
	return proto.EnumName(ZmetricTypes_name, int32(x))
}

func (ZmetricTypes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{0}
}

type MetricItemType int32

const (
	MetricItemType_MetricItemOther   MetricItemType = 0
	MetricItemType_MetricItemGauge   MetricItemType = 1
	MetricItemType_MetricItemCounter MetricItemType = 2
	MetricItemType_MetricItemState   MetricItemType = 3
)

var MetricItemType_name = map[int32]string{
	0: "MetricItemOther",
	1: "MetricItemGauge",
	2: "MetricItemCounter",
	3: "MetricItemState",
}

var MetricItemType_value = map[string]int32{
	"MetricItemOther":   0,
	"MetricItemGauge":   1,
	"MetricItemCounter": 2,
	"MetricItemState":   3,
}

func (x MetricItemType) String() string {
	return proto.EnumName(MetricItemType_name, int32(x))
}

func (MetricItemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{1}
}

type MemoryMetric struct {
	UsedMem              uint32   `protobuf:"varint,2,opt,name=usedMem,proto3" json:"usedMem,omitempty"`
	AvailMem             uint32   `protobuf:"varint,3,opt,name=availMem,proto3" json:"availMem,omitempty"`
	UsedPercentage       float64  `protobuf:"fixed64,4,opt,name=usedPercentage,proto3" json:"usedPercentage,omitempty"`
	AvailPercentage      float64  `protobuf:"fixed64,5,opt,name=availPercentage,proto3" json:"availPercentage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemoryMetric) Reset()         { *m = MemoryMetric{} }
func (m *MemoryMetric) String() string { return proto.CompactTextString(m) }
func (*MemoryMetric) ProtoMessage()    {}
func (*MemoryMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{0}
}

func (m *MemoryMetric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemoryMetric.Unmarshal(m, b)
}
func (m *MemoryMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemoryMetric.Marshal(b, m, deterministic)
}
func (m *MemoryMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemoryMetric.Merge(m, src)
}
func (m *MemoryMetric) XXX_Size() int {
	return xxx_messageInfo_MemoryMetric.Size(m)
}
func (m *MemoryMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_MemoryMetric.DiscardUnknown(m)
}

var xxx_messageInfo_MemoryMetric proto.InternalMessageInfo

func (m *MemoryMetric) GetUsedMem() uint32 {
	if m != nil {
		return m.UsedMem
	}
	return 0
}

func (m *MemoryMetric) GetAvailMem() uint32 {
	if m != nil {
		return m.AvailMem
	}
	return 0
}

func (m *MemoryMetric) GetUsedPercentage() float64 {
	if m != nil {
		return m.UsedPercentage
	}
	return 0
}

func (m *MemoryMetric) GetAvailPercentage() float64 {
	if m != nil {
		return m.AvailPercentage
	}
	return 0
}

type NetworkMetric struct {
	IName   string `protobuf:"bytes,1,opt,name=iName,proto3" json:"iName,omitempty"`
	TxBytes uint64 `protobuf:"varint,2,opt,name=txBytes,proto3" json:"txBytes,omitempty"`
	RxBytes uint64 `protobuf:"varint,3,opt,name=rxBytes,proto3" json:"rxBytes,omitempty"`
	TxDrops uint64 `protobuf:"varint,4,opt,name=txDrops,proto3" json:"txDrops,omitempty"`
	RxDrops uint64 `protobuf:"varint,5,opt,name=rxDrops,proto3" json:"rxDrops,omitempty"`
	// deprecated = 6;
	// deprecated = 7;
	TxPkts               uint64   `protobuf:"varint,8,opt,name=txPkts,proto3" json:"txPkts,omitempty"`
	RxPkts               uint64   `protobuf:"varint,9,opt,name=rxPkts,proto3" json:"rxPkts,omitempty"`
	TxErrors             uint64   `protobuf:"varint,10,opt,name=txErrors,proto3" json:"txErrors,omitempty"`
	RxErrors             uint64   `protobuf:"varint,11,opt,name=rxErrors,proto3" json:"rxErrors,omitempty"`
	TxAclDrops           uint64   `protobuf:"varint,12,opt,name=txAclDrops,proto3" json:"txAclDrops,omitempty"`
	RxAclDrops           uint64   `protobuf:"varint,13,opt,name=rxAclDrops,proto3" json:"rxAclDrops,omitempty"`
	TxAclRateLimitDrops  uint64   `protobuf:"varint,14,opt,name=txAclRateLimitDrops,proto3" json:"txAclRateLimitDrops,omitempty"`
	RxAclRateLimitDrops  uint64   `protobuf:"varint,15,opt,name=rxAclRateLimitDrops,proto3" json:"rxAclRateLimitDrops,omitempty"`
	LocalName            string   `protobuf:"bytes,16,opt,name=localName,proto3" json:"localName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkMetric) Reset()         { *m = NetworkMetric{} }
func (m *NetworkMetric) String() string { return proto.CompactTextString(m) }
func (*NetworkMetric) ProtoMessage()    {}
func (*NetworkMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{1}
}

func (m *NetworkMetric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkMetric.Unmarshal(m, b)
}
func (m *NetworkMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkMetric.Marshal(b, m, deterministic)
}
func (m *NetworkMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkMetric.Merge(m, src)
}
func (m *NetworkMetric) XXX_Size() int {
	return xxx_messageInfo_NetworkMetric.Size(m)
}
func (m *NetworkMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkMetric.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkMetric proto.InternalMessageInfo

func (m *NetworkMetric) GetIName() string {
	if m != nil {
		return m.IName
	}
	return ""
}

func (m *NetworkMetric) GetTxBytes() uint64 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

func (m *NetworkMetric) GetRxBytes() uint64 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

func (m *NetworkMetric) GetTxDrops() uint64 {
	if m != nil {
		return m.TxDrops
	}
	return 0
}

func (m *NetworkMetric) GetRxDrops() uint64 {
	if m != nil {
		return m.RxDrops
	}
	return 0
}

func (m *NetworkMetric) GetTxPkts() uint64 {
	if m != nil {
		return m.TxPkts
	}
	return 0
}

func (m *NetworkMetric) GetRxPkts() uint64 {
	if m != nil {
		return m.RxPkts
	}
	return 0
}

func (m *NetworkMetric) GetTxErrors() uint64 {
	if m != nil {
		return m.TxErrors
	}
	return 0
}

func (m *NetworkMetric) GetRxErrors() uint64 {
	if m != nil {
		return m.RxErrors
	}
	return 0
}

func (m *NetworkMetric) GetTxAclDrops() uint64 {
	if m != nil {
		return m.TxAclDrops
	}
	return 0
}

func (m *NetworkMetric) GetRxAclDrops() uint64 {
	if m != nil {
		return m.RxAclDrops
	}
	return 0
}

func (m *NetworkMetric) GetTxAclRateLimitDrops() uint64 {
	if m != nil {
		return m.TxAclRateLimitDrops
	}
	return 0
}

func (m *NetworkMetric) GetRxAclRateLimitDrops() uint64 {
	if m != nil {
		return m.RxAclRateLimitDrops
	}
	return 0
}

func (m *NetworkMetric) GetLocalName() string {
	if m != nil {
		return m.LocalName
	}
	return ""
}

// Failures and successes for commuication to zedcloud
// for each management port
type ZedcloudMetric struct {
	IfName               string               `protobuf:"bytes,1,opt,name=ifName,proto3" json:"ifName,omitempty"`
	Failures             uint64               `protobuf:"varint,2,opt,name=failures,proto3" json:"failures,omitempty"`
	Success              uint64               `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	LastFailure          *timestamp.Timestamp `protobuf:"bytes,4,opt,name=lastFailure,proto3" json:"lastFailure,omitempty"`
	LastSuccess          *timestamp.Timestamp `protobuf:"bytes,5,opt,name=lastSuccess,proto3" json:"lastSuccess,omitempty"`
	UrlMetrics           []*UrlcloudMetric    `protobuf:"bytes,6,rep,name=urlMetrics,proto3" json:"urlMetrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ZedcloudMetric) Reset()         { *m = ZedcloudMetric{} }
func (m *ZedcloudMetric) String() string { return proto.CompactTextString(m) }
func (*ZedcloudMetric) ProtoMessage()    {}
func (*ZedcloudMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{2}
}

func (m *ZedcloudMetric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZedcloudMetric.Unmarshal(m, b)
}
func (m *ZedcloudMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZedcloudMetric.Marshal(b, m, deterministic)
}
func (m *ZedcloudMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZedcloudMetric.Merge(m, src)
}
func (m *ZedcloudMetric) XXX_Size() int {
	return xxx_messageInfo_ZedcloudMetric.Size(m)
}
func (m *ZedcloudMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_ZedcloudMetric.DiscardUnknown(m)
}

var xxx_messageInfo_ZedcloudMetric proto.InternalMessageInfo

func (m *ZedcloudMetric) GetIfName() string {
	if m != nil {
		return m.IfName
	}
	return ""
}

func (m *ZedcloudMetric) GetFailures() uint64 {
	if m != nil {
		return m.Failures
	}
	return 0
}

func (m *ZedcloudMetric) GetSuccess() uint64 {
	if m != nil {
		return m.Success
	}
	return 0
}

func (m *ZedcloudMetric) GetLastFailure() *timestamp.Timestamp {
	if m != nil {
		return m.LastFailure
	}
	return nil
}

func (m *ZedcloudMetric) GetLastSuccess() *timestamp.Timestamp {
	if m != nil {
		return m.LastSuccess
	}
	return nil
}

func (m *ZedcloudMetric) GetUrlMetrics() []*UrlcloudMetric {
	if m != nil {
		return m.UrlMetrics
	}
	return nil
}

// Information for each API URL
type UrlcloudMetric struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	TryMsgCount          int64    `protobuf:"varint,2,opt,name=tryMsgCount,proto3" json:"tryMsgCount,omitempty"`
	TryByteCount         int64    `protobuf:"varint,3,opt,name=tryByteCount,proto3" json:"tryByteCount,omitempty"`
	SentMsgCount         int64    `protobuf:"varint,4,opt,name=sentMsgCount,proto3" json:"sentMsgCount,omitempty"`
	SentByteCount        int64    `protobuf:"varint,5,opt,name=sentByteCount,proto3" json:"sentByteCount,omitempty"`
	RecvMsgCount         int64    `protobuf:"varint,6,opt,name=recvMsgCount,proto3" json:"recvMsgCount,omitempty"`
	RecvByteCount        int64    `protobuf:"varint,7,opt,name=recvByteCount,proto3" json:"recvByteCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UrlcloudMetric) Reset()         { *m = UrlcloudMetric{} }
func (m *UrlcloudMetric) String() string { return proto.CompactTextString(m) }
func (*UrlcloudMetric) ProtoMessage()    {}
func (*UrlcloudMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{3}
}

func (m *UrlcloudMetric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UrlcloudMetric.Unmarshal(m, b)
}
func (m *UrlcloudMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UrlcloudMetric.Marshal(b, m, deterministic)
}
func (m *UrlcloudMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UrlcloudMetric.Merge(m, src)
}
func (m *UrlcloudMetric) XXX_Size() int {
	return xxx_messageInfo_UrlcloudMetric.Size(m)
}
func (m *UrlcloudMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_UrlcloudMetric.DiscardUnknown(m)
}

var xxx_messageInfo_UrlcloudMetric proto.InternalMessageInfo

func (m *UrlcloudMetric) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *UrlcloudMetric) GetTryMsgCount() int64 {
	if m != nil {
		return m.TryMsgCount
	}
	return 0
}

func (m *UrlcloudMetric) GetTryByteCount() int64 {
	if m != nil {
		return m.TryByteCount
	}
	return 0
}

func (m *UrlcloudMetric) GetSentMsgCount() int64 {
	if m != nil {
		return m.SentMsgCount
	}
	return 0
}

func (m *UrlcloudMetric) GetSentByteCount() int64 {
	if m != nil {
		return m.SentByteCount
	}
	return 0
}

func (m *UrlcloudMetric) GetRecvMsgCount() int64 {
	if m != nil {
		return m.RecvMsgCount
	}
	return 0
}

func (m *UrlcloudMetric) GetRecvByteCount() int64 {
	if m != nil {
		return m.RecvByteCount
	}
	return 0
}

type AppCpuMetric struct {
	// deprecated = 2;
	// deprecated = 3;
	UpTime               *timestamp.Timestamp `protobuf:"bytes,4,opt,name=upTime,proto3" json:"upTime,omitempty"`
	Total                uint64               `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AppCpuMetric) Reset()         { *m = AppCpuMetric{} }
func (m *AppCpuMetric) String() string { return proto.CompactTextString(m) }
func (*AppCpuMetric) ProtoMessage()    {}
func (*AppCpuMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{4}
}

func (m *AppCpuMetric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppCpuMetric.Unmarshal(m, b)
}
func (m *AppCpuMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppCpuMetric.Marshal(b, m, deterministic)
}
func (m *AppCpuMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppCpuMetric.Merge(m, src)
}
func (m *AppCpuMetric) XXX_Size() int {
	return xxx_messageInfo_AppCpuMetric.Size(m)
}
func (m *AppCpuMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_AppCpuMetric.DiscardUnknown(m)
}

var xxx_messageInfo_AppCpuMetric proto.InternalMessageInfo

func (m *AppCpuMetric) GetUpTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpTime
	}
	return nil
}

func (m *AppCpuMetric) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type DeviceMetric struct {
	// deprecated = 1;
	Memory   *MemoryMetric     `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Network  []*NetworkMetric  `protobuf:"bytes,3,rep,name=network,proto3" json:"network,omitempty"`
	Zedcloud []*ZedcloudMetric `protobuf:"bytes,4,rep,name=zedcloud,proto3" json:"zedcloud,omitempty"`
	// deprecated = 5;
	Disk                     []*DiskMetric `protobuf:"bytes,6,rep,name=disk,proto3" json:"disk,omitempty"`
	CpuMetric                *AppCpuMetric `protobuf:"bytes,7,opt,name=cpuMetric,proto3" json:"cpuMetric,omitempty"`
	MetricItems              []*MetricItem `protobuf:"bytes,8,rep,name=metricItems,proto3" json:"metricItems,omitempty"`
	RuntimeStorageOverheadMB uint64        `protobuf:"varint,9,opt,name=runtimeStorageOverheadMB,proto3" json:"runtimeStorageOverheadMB,omitempty"`
	AppRunTimeStorageMB      uint64        `protobuf:"varint,10,opt,name=appRunTimeStorageMB,proto3" json:"appRunTimeStorageMB,omitempty"`
	SystemServicesMemoryMB   *MemoryMetric `protobuf:"bytes,11,opt,name=systemServicesMemoryMB,proto3" json:"systemServicesMemoryMB,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}      `json:"-"`
	XXX_unrecognized         []byte        `json:"-"`
	XXX_sizecache            int32         `json:"-"`
}

func (m *DeviceMetric) Reset()         { *m = DeviceMetric{} }
func (m *DeviceMetric) String() string { return proto.CompactTextString(m) }
func (*DeviceMetric) ProtoMessage()    {}
func (*DeviceMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{5}
}

func (m *DeviceMetric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceMetric.Unmarshal(m, b)
}
func (m *DeviceMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceMetric.Marshal(b, m, deterministic)
}
func (m *DeviceMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceMetric.Merge(m, src)
}
func (m *DeviceMetric) XXX_Size() int {
	return xxx_messageInfo_DeviceMetric.Size(m)
}
func (m *DeviceMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceMetric.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceMetric proto.InternalMessageInfo

func (m *DeviceMetric) GetMemory() *MemoryMetric {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *DeviceMetric) GetNetwork() []*NetworkMetric {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *DeviceMetric) GetZedcloud() []*ZedcloudMetric {
	if m != nil {
		return m.Zedcloud
	}
	return nil
}

func (m *DeviceMetric) GetDisk() []*DiskMetric {
	if m != nil {
		return m.Disk
	}
	return nil
}

func (m *DeviceMetric) GetCpuMetric() *AppCpuMetric {
	if m != nil {
		return m.CpuMetric
	}
	return nil
}

func (m *DeviceMetric) GetMetricItems() []*MetricItem {
	if m != nil {
		return m.MetricItems
	}
	return nil
}

func (m *DeviceMetric) GetRuntimeStorageOverheadMB() uint64 {
	if m != nil {
		return m.RuntimeStorageOverheadMB
	}
	return 0
}

func (m *DeviceMetric) GetAppRunTimeStorageMB() uint64 {
	if m != nil {
		return m.AppRunTimeStorageMB
	}
	return 0
}

func (m *DeviceMetric) GetSystemServicesMemoryMB() *MemoryMetric {
	if m != nil {
		return m.SystemServicesMemoryMB
	}
	return nil
}

// Open-ended metrics from different part of the device such as LTE modem
// metrics.
type MetricItem struct {
	Key  string         `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Type MetricItemType `protobuf:"varint,2,opt,name=type,proto3,enum=MetricItemType" json:"type,omitempty"`
	// Types that are valid to be assigned to MetricItemValue:
	//	*MetricItem_BoolValue
	//	*MetricItem_Uint32Value
	//	*MetricItem_Uint64Value
	//	*MetricItem_FloatValue
	//	*MetricItem_StringValue
	MetricItemValue      isMetricItem_MetricItemValue `protobuf_oneof:"metricItemValue"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *MetricItem) Reset()         { *m = MetricItem{} }
func (m *MetricItem) String() string { return proto.CompactTextString(m) }
func (*MetricItem) ProtoMessage()    {}
func (*MetricItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{6}
}

func (m *MetricItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricItem.Unmarshal(m, b)
}
func (m *MetricItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricItem.Marshal(b, m, deterministic)
}
func (m *MetricItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricItem.Merge(m, src)
}
func (m *MetricItem) XXX_Size() int {
	return xxx_messageInfo_MetricItem.Size(m)
}
func (m *MetricItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricItem.DiscardUnknown(m)
}

var xxx_messageInfo_MetricItem proto.InternalMessageInfo

func (m *MetricItem) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MetricItem) GetType() MetricItemType {
	if m != nil {
		return m.Type
	}
	return MetricItemType_MetricItemOther
}

type isMetricItem_MetricItemValue interface {
	isMetricItem_MetricItemValue()
}

type MetricItem_BoolValue struct {
	BoolValue bool `protobuf:"varint,3,opt,name=boolValue,proto3,oneof"`
}

type MetricItem_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,4,opt,name=uint32Value,proto3,oneof"`
}

type MetricItem_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,5,opt,name=uint64Value,proto3,oneof"`
}

type MetricItem_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,6,opt,name=floatValue,proto3,oneof"`
}

type MetricItem_StringValue struct {
	StringValue string `protobuf:"bytes,7,opt,name=stringValue,proto3,oneof"`
}

func (*MetricItem_BoolValue) isMetricItem_MetricItemValue() {}

func (*MetricItem_Uint32Value) isMetricItem_MetricItemValue() {}

func (*MetricItem_Uint64Value) isMetricItem_MetricItemValue() {}

func (*MetricItem_FloatValue) isMetricItem_MetricItemValue() {}

func (*MetricItem_StringValue) isMetricItem_MetricItemValue() {}

func (m *MetricItem) GetMetricItemValue() isMetricItem_MetricItemValue {
	if m != nil {
		return m.MetricItemValue
	}
	return nil
}

func (m *MetricItem) GetBoolValue() bool {
	if x, ok := m.GetMetricItemValue().(*MetricItem_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *MetricItem) GetUint32Value() uint32 {
	if x, ok := m.GetMetricItemValue().(*MetricItem_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (m *MetricItem) GetUint64Value() uint64 {
	if x, ok := m.GetMetricItemValue().(*MetricItem_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (m *MetricItem) GetFloatValue() float32 {
	if x, ok := m.GetMetricItemValue().(*MetricItem_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *MetricItem) GetStringValue() string {
	if x, ok := m.GetMetricItemValue().(*MetricItem_StringValue); ok {
		return x.StringValue
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MetricItem) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MetricItem_BoolValue)(nil),
		(*MetricItem_Uint32Value)(nil),
		(*MetricItem_Uint64Value)(nil),
		(*MetricItem_FloatValue)(nil),
		(*MetricItem_StringValue)(nil),
	}
}

// For each partition; counts since boot
type DiskMetric struct {
	Disk                 string   `protobuf:"bytes,1,opt,name=disk,proto3" json:"disk,omitempty"`
	MountPath            string   `protobuf:"bytes,2,opt,name=mountPath,proto3" json:"mountPath,omitempty"`
	ReadBytes            uint64   `protobuf:"varint,3,opt,name=readBytes,proto3" json:"readBytes,omitempty"`
	WriteBytes           uint64   `protobuf:"varint,4,opt,name=writeBytes,proto3" json:"writeBytes,omitempty"`
	ReadCount            uint64   `protobuf:"varint,5,opt,name=readCount,proto3" json:"readCount,omitempty"`
	WriteCount           uint64   `protobuf:"varint,6,opt,name=writeCount,proto3" json:"writeCount,omitempty"`
	Total                uint64   `protobuf:"varint,7,opt,name=total,proto3" json:"total,omitempty"`
	Used                 uint64   `protobuf:"varint,8,opt,name=used,proto3" json:"used,omitempty"`
	Free                 uint64   `protobuf:"varint,9,opt,name=free,proto3" json:"free,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiskMetric) Reset()         { *m = DiskMetric{} }
func (m *DiskMetric) String() string { return proto.CompactTextString(m) }
func (*DiskMetric) ProtoMessage()    {}
func (*DiskMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{7}
}

func (m *DiskMetric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiskMetric.Unmarshal(m, b)
}
func (m *DiskMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiskMetric.Marshal(b, m, deterministic)
}
func (m *DiskMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiskMetric.Merge(m, src)
}
func (m *DiskMetric) XXX_Size() int {
	return xxx_messageInfo_DiskMetric.Size(m)
}
func (m *DiskMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_DiskMetric.DiscardUnknown(m)
}

var xxx_messageInfo_DiskMetric proto.InternalMessageInfo

func (m *DiskMetric) GetDisk() string {
	if m != nil {
		return m.Disk
	}
	return ""
}

func (m *DiskMetric) GetMountPath() string {
	if m != nil {
		return m.MountPath
	}
	return ""
}

func (m *DiskMetric) GetReadBytes() uint64 {
	if m != nil {
		return m.ReadBytes
	}
	return 0
}

func (m *DiskMetric) GetWriteBytes() uint64 {
	if m != nil {
		return m.WriteBytes
	}
	return 0
}

func (m *DiskMetric) GetReadCount() uint64 {
	if m != nil {
		return m.ReadCount
	}
	return 0
}

func (m *DiskMetric) GetWriteCount() uint64 {
	if m != nil {
		return m.WriteCount
	}
	return 0
}

func (m *DiskMetric) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *DiskMetric) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *DiskMetric) GetFree() uint64 {
	if m != nil {
		return m.Free
	}
	return 0
}

type AppDiskMetric struct {
	Disk                 string   `protobuf:"bytes,1,opt,name=disk,proto3" json:"disk,omitempty"`
	Provisioned          uint64   `protobuf:"varint,2,opt,name=provisioned,proto3" json:"provisioned,omitempty"`
	Used                 uint64   `protobuf:"varint,3,opt,name=used,proto3" json:"used,omitempty"`
	DiskType             string   `protobuf:"bytes,4,opt,name=diskType,proto3" json:"diskType,omitempty"`
	Dirty                bool     `protobuf:"varint,5,opt,name=dirty,proto3" json:"dirty,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppDiskMetric) Reset()         { *m = AppDiskMetric{} }
func (m *AppDiskMetric) String() string { return proto.CompactTextString(m) }
func (*AppDiskMetric) ProtoMessage()    {}
func (*AppDiskMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{8}
}

func (m *AppDiskMetric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppDiskMetric.Unmarshal(m, b)
}
func (m *AppDiskMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppDiskMetric.Marshal(b, m, deterministic)
}
func (m *AppDiskMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppDiskMetric.Merge(m, src)
}
func (m *AppDiskMetric) XXX_Size() int {
	return xxx_messageInfo_AppDiskMetric.Size(m)
}
func (m *AppDiskMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_AppDiskMetric.DiscardUnknown(m)
}

var xxx_messageInfo_AppDiskMetric proto.InternalMessageInfo

func (m *AppDiskMetric) GetDisk() string {
	if m != nil {
		return m.Disk
	}
	return ""
}

func (m *AppDiskMetric) GetProvisioned() uint64 {
	if m != nil {
		return m.Provisioned
	}
	return 0
}

func (m *AppDiskMetric) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *AppDiskMetric) GetDiskType() string {
	if m != nil {
		return m.DiskType
	}
	return ""
}

func (m *AppDiskMetric) GetDirty() bool {
	if m != nil {
		return m.Dirty
	}
	return false
}

type AppMetric struct {
	AppID                string           `protobuf:"bytes,1,opt,name=AppID,proto3" json:"AppID,omitempty"`
	AppVersion           string           `protobuf:"bytes,10,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	AppName              string           `protobuf:"bytes,2,opt,name=AppName,proto3" json:"AppName,omitempty"`
	Cpu                  *AppCpuMetric    `protobuf:"bytes,3,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory               *MemoryMetric    `protobuf:"bytes,4,opt,name=memory,proto3" json:"memory,omitempty"`
	Network              []*NetworkMetric `protobuf:"bytes,5,rep,name=network,proto3" json:"network,omitempty"`
	Disk                 []*AppDiskMetric `protobuf:"bytes,6,rep,name=disk,proto3" json:"disk,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AppMetric) Reset()         { *m = AppMetric{} }
func (m *AppMetric) String() string { return proto.CompactTextString(m) }
func (*AppMetric) ProtoMessage()    {}
func (*AppMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{9}
}

func (m *AppMetric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppMetric.Unmarshal(m, b)
}
func (m *AppMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppMetric.Marshal(b, m, deterministic)
}
func (m *AppMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppMetric.Merge(m, src)
}
func (m *AppMetric) XXX_Size() int {
	return xxx_messageInfo_AppMetric.Size(m)
}
func (m *AppMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_AppMetric.DiscardUnknown(m)
}

var xxx_messageInfo_AppMetric proto.InternalMessageInfo

func (m *AppMetric) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *AppMetric) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *AppMetric) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *AppMetric) GetCpu() *AppCpuMetric {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *AppMetric) GetMemory() *MemoryMetric {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *AppMetric) GetNetwork() []*NetworkMetric {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *AppMetric) GetDisk() []*AppDiskMetric {
	if m != nil {
		return m.Disk
	}
	return nil
}

// Lisp stats
type PktStat struct {
	Packets              uint64   `protobuf:"varint,1,opt,name=Packets,proto3" json:"Packets,omitempty"`
	Bytes                uint64   `protobuf:"varint,2,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PktStat) Reset()         { *m = PktStat{} }
func (m *PktStat) String() string { return proto.CompactTextString(m) }
func (*PktStat) ProtoMessage()    {}
func (*PktStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{10}
}

func (m *PktStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PktStat.Unmarshal(m, b)
}
func (m *PktStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PktStat.Marshal(b, m, deterministic)
}
func (m *PktStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PktStat.Merge(m, src)
}
func (m *PktStat) XXX_Size() int {
	return xxx_messageInfo_PktStat.Size(m)
}
func (m *PktStat) XXX_DiscardUnknown() {
	xxx_messageInfo_PktStat.DiscardUnknown(m)
}

var xxx_messageInfo_PktStat proto.InternalMessageInfo

func (m *PktStat) GetPackets() uint64 {
	if m != nil {
		return m.Packets
	}
	return 0
}

func (m *PktStat) GetBytes() uint64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

type RlocStats struct {
	Rloc                   string   `protobuf:"bytes,1,opt,name=Rloc,proto3" json:"Rloc,omitempty"`
	Stats                  *PktStat `protobuf:"bytes,2,opt,name=Stats,proto3" json:"Stats,omitempty"`
	SecondsSinceLastPacket uint64   `protobuf:"varint,3,opt,name=SecondsSinceLastPacket,proto3" json:"SecondsSinceLastPacket,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *RlocStats) Reset()         { *m = RlocStats{} }
func (m *RlocStats) String() string { return proto.CompactTextString(m) }
func (*RlocStats) ProtoMessage()    {}
func (*RlocStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{11}
}

func (m *RlocStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RlocStats.Unmarshal(m, b)
}
func (m *RlocStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RlocStats.Marshal(b, m, deterministic)
}
func (m *RlocStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RlocStats.Merge(m, src)
}
func (m *RlocStats) XXX_Size() int {
	return xxx_messageInfo_RlocStats.Size(m)
}
func (m *RlocStats) XXX_DiscardUnknown() {
	xxx_messageInfo_RlocStats.DiscardUnknown(m)
}

var xxx_messageInfo_RlocStats proto.InternalMessageInfo

func (m *RlocStats) GetRloc() string {
	if m != nil {
		return m.Rloc
	}
	return ""
}

func (m *RlocStats) GetStats() *PktStat {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *RlocStats) GetSecondsSinceLastPacket() uint64 {
	if m != nil {
		return m.SecondsSinceLastPacket
	}
	return 0
}

type EidStats struct {
	IID                  uint64       `protobuf:"varint,1,opt,name=IID,proto3" json:"IID,omitempty"`
	EID                  string       `protobuf:"bytes,2,opt,name=EID,proto3" json:"EID,omitempty"`
	RlocStatsEntries     []*RlocStats `protobuf:"bytes,3,rep,name=RlocStatsEntries,proto3" json:"RlocStatsEntries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *EidStats) Reset()         { *m = EidStats{} }
func (m *EidStats) String() string { return proto.CompactTextString(m) }
func (*EidStats) ProtoMessage()    {}
func (*EidStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{12}
}

func (m *EidStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EidStats.Unmarshal(m, b)
}
func (m *EidStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EidStats.Marshal(b, m, deterministic)
}
func (m *EidStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EidStats.Merge(m, src)
}
func (m *EidStats) XXX_Size() int {
	return xxx_messageInfo_EidStats.Size(m)
}
func (m *EidStats) XXX_DiscardUnknown() {
	xxx_messageInfo_EidStats.DiscardUnknown(m)
}

var xxx_messageInfo_EidStats proto.InternalMessageInfo

func (m *EidStats) GetIID() uint64 {
	if m != nil {
		return m.IID
	}
	return 0
}

func (m *EidStats) GetEID() string {
	if m != nil {
		return m.EID
	}
	return ""
}

func (m *EidStats) GetRlocStatsEntries() []*RlocStats {
	if m != nil {
		return m.RlocStatsEntries
	}
	return nil
}

type ZMetricLisp struct {
	// Encap Statistics
	EidStatsEntries    []*EidStats `protobuf:"bytes,1,rep,name=EidStatsEntries,proto3" json:"EidStatsEntries,omitempty"`
	ItrPacketSendError *PktStat    `protobuf:"bytes,2,opt,name=ItrPacketSendError,proto3" json:"ItrPacketSendError,omitempty"`
	InvalidEidError    *PktStat    `protobuf:"bytes,3,opt,name=InvalidEidError,proto3" json:"InvalidEidError,omitempty"`
	// Decap Statistics
	NoDecryptKey         *PktStat `protobuf:"bytes,4,opt,name=NoDecryptKey,proto3" json:"NoDecryptKey,omitempty"`
	OuterHeaderError     *PktStat `protobuf:"bytes,5,opt,name=OuterHeaderError,proto3" json:"OuterHeaderError,omitempty"`
	BadInnerVersion      *PktStat `protobuf:"bytes,6,opt,name=BadInnerVersion,proto3" json:"BadInnerVersion,omitempty"`
	GoodPackets          *PktStat `protobuf:"bytes,7,opt,name=GoodPackets,proto3" json:"GoodPackets,omitempty"`
	ICVError             *PktStat `protobuf:"bytes,8,opt,name=ICVError,proto3" json:"ICVError,omitempty"`
	LispHeaderError      *PktStat `protobuf:"bytes,9,opt,name=LispHeaderError,proto3" json:"LispHeaderError,omitempty"`
	CheckSumError        *PktStat `protobuf:"bytes,10,opt,name=CheckSumError,proto3" json:"CheckSumError,omitempty"`
	DecapReInjectError   *PktStat `protobuf:"bytes,11,opt,name=DecapReInjectError,proto3" json:"DecapReInjectError,omitempty"`
	DecryptError         *PktStat `protobuf:"bytes,12,opt,name=DecryptError,proto3" json:"DecryptError,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZMetricLisp) Reset()         { *m = ZMetricLisp{} }
func (m *ZMetricLisp) String() string { return proto.CompactTextString(m) }
func (*ZMetricLisp) ProtoMessage()    {}
func (*ZMetricLisp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{13}
}

func (m *ZMetricLisp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZMetricLisp.Unmarshal(m, b)
}
func (m *ZMetricLisp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZMetricLisp.Marshal(b, m, deterministic)
}
func (m *ZMetricLisp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZMetricLisp.Merge(m, src)
}
func (m *ZMetricLisp) XXX_Size() int {
	return xxx_messageInfo_ZMetricLisp.Size(m)
}
func (m *ZMetricLisp) XXX_DiscardUnknown() {
	xxx_messageInfo_ZMetricLisp.DiscardUnknown(m)
}

var xxx_messageInfo_ZMetricLisp proto.InternalMessageInfo

func (m *ZMetricLisp) GetEidStatsEntries() []*EidStats {
	if m != nil {
		return m.EidStatsEntries
	}
	return nil
}

func (m *ZMetricLisp) GetItrPacketSendError() *PktStat {
	if m != nil {
		return m.ItrPacketSendError
	}
	return nil
}

func (m *ZMetricLisp) GetInvalidEidError() *PktStat {
	if m != nil {
		return m.InvalidEidError
	}
	return nil
}

func (m *ZMetricLisp) GetNoDecryptKey() *PktStat {
	if m != nil {
		return m.NoDecryptKey
	}
	return nil
}

func (m *ZMetricLisp) GetOuterHeaderError() *PktStat {
	if m != nil {
		return m.OuterHeaderError
	}
	return nil
}

func (m *ZMetricLisp) GetBadInnerVersion() *PktStat {
	if m != nil {
		return m.BadInnerVersion
	}
	return nil
}

func (m *ZMetricLisp) GetGoodPackets() *PktStat {
	if m != nil {
		return m.GoodPackets
	}
	return nil
}

func (m *ZMetricLisp) GetICVError() *PktStat {
	if m != nil {
		return m.ICVError
	}
	return nil
}

func (m *ZMetricLisp) GetLispHeaderError() *PktStat {
	if m != nil {
		return m.LispHeaderError
	}
	return nil
}

func (m *ZMetricLisp) GetCheckSumError() *PktStat {
	if m != nil {
		return m.CheckSumError
	}
	return nil
}

func (m *ZMetricLisp) GetDecapReInjectError() *PktStat {
	if m != nil {
		return m.DecapReInjectError
	}
	return nil
}

func (m *ZMetricLisp) GetDecryptError() *PktStat {
	if m != nil {
		return m.DecryptError
	}
	return nil
}

// Vpn Stats
type ZMetricConn struct {
	InPkts               *PktStat `protobuf:"bytes,1,opt,name=InPkts,proto3" json:"InPkts,omitempty"`
	OutPkts              *PktStat `protobuf:"bytes,2,opt,name=OutPkts,proto3" json:"OutPkts,omitempty"`
	ErrPkts              *PktStat `protobuf:"bytes,3,opt,name=ErrPkts,proto3" json:"ErrPkts,omitempty"`
	CarierErrPkts        *PktStat `protobuf:"bytes,4,opt,name=CarierErrPkts,proto3" json:"CarierErrPkts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZMetricConn) Reset()         { *m = ZMetricConn{} }
func (m *ZMetricConn) String() string { return proto.CompactTextString(m) }
func (*ZMetricConn) ProtoMessage()    {}
func (*ZMetricConn) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{14}
}

func (m *ZMetricConn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZMetricConn.Unmarshal(m, b)
}
func (m *ZMetricConn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZMetricConn.Marshal(b, m, deterministic)
}
func (m *ZMetricConn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZMetricConn.Merge(m, src)
}
func (m *ZMetricConn) XXX_Size() int {
	return xxx_messageInfo_ZMetricConn.Size(m)
}
func (m *ZMetricConn) XXX_DiscardUnknown() {
	xxx_messageInfo_ZMetricConn.DiscardUnknown(m)
}

var xxx_messageInfo_ZMetricConn proto.InternalMessageInfo

func (m *ZMetricConn) GetInPkts() *PktStat {
	if m != nil {
		return m.InPkts
	}
	return nil
}

func (m *ZMetricConn) GetOutPkts() *PktStat {
	if m != nil {
		return m.OutPkts
	}
	return nil
}

func (m *ZMetricConn) GetErrPkts() *PktStat {
	if m != nil {
		return m.ErrPkts
	}
	return nil
}

func (m *ZMetricConn) GetCarierErrPkts() *PktStat {
	if m != nil {
		return m.CarierErrPkts
	}
	return nil
}

type ZMetricVpn struct {
	ConnStat             *ZMetricConn `protobuf:"bytes,1,opt,name=ConnStat,proto3" json:"ConnStat,omitempty"`
	IkeStat              *ZMetricConn `protobuf:"bytes,2,opt,name=IkeStat,proto3" json:"IkeStat,omitempty"`
	NatTStat             *ZMetricConn `protobuf:"bytes,3,opt,name=NatTStat,proto3" json:"NatTStat,omitempty"`
	EspStat              *ZMetricConn `protobuf:"bytes,4,opt,name=EspStat,proto3" json:"EspStat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ZMetricVpn) Reset()         { *m = ZMetricVpn{} }
func (m *ZMetricVpn) String() string { return proto.CompactTextString(m) }
func (*ZMetricVpn) ProtoMessage()    {}
func (*ZMetricVpn) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{15}
}

func (m *ZMetricVpn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZMetricVpn.Unmarshal(m, b)
}
func (m *ZMetricVpn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZMetricVpn.Marshal(b, m, deterministic)
}
func (m *ZMetricVpn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZMetricVpn.Merge(m, src)
}
func (m *ZMetricVpn) XXX_Size() int {
	return xxx_messageInfo_ZMetricVpn.Size(m)
}
func (m *ZMetricVpn) XXX_DiscardUnknown() {
	xxx_messageInfo_ZMetricVpn.DiscardUnknown(m)
}

var xxx_messageInfo_ZMetricVpn proto.InternalMessageInfo

func (m *ZMetricVpn) GetConnStat() *ZMetricConn {
	if m != nil {
		return m.ConnStat
	}
	return nil
}

func (m *ZMetricVpn) GetIkeStat() *ZMetricConn {
	if m != nil {
		return m.IkeStat
	}
	return nil
}

func (m *ZMetricVpn) GetNatTStat() *ZMetricConn {
	if m != nil {
		return m.NatTStat
	}
	return nil
}

func (m *ZMetricVpn) GetEspStat() *ZMetricConn {
	if m != nil {
		return m.EspStat
	}
	return nil
}

// For other services with no specific metrics
type ZMetricNone struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZMetricNone) Reset()         { *m = ZMetricNone{} }
func (m *ZMetricNone) String() string { return proto.CompactTextString(m) }
func (*ZMetricNone) ProtoMessage()    {}
func (*ZMetricNone) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{16}
}

func (m *ZMetricNone) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZMetricNone.Unmarshal(m, b)
}
func (m *ZMetricNone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZMetricNone.Marshal(b, m, deterministic)
}
func (m *ZMetricNone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZMetricNone.Merge(m, src)
}
func (m *ZMetricNone) XXX_Size() int {
	return xxx_messageInfo_ZMetricNone.Size(m)
}
func (m *ZMetricNone) XXX_DiscardUnknown() {
	xxx_messageInfo_ZMetricNone.DiscardUnknown(m)
}

var xxx_messageInfo_ZMetricNone proto.InternalMessageInfo

// flow stats
type ZMetricFlowLink struct {
	// Types that are valid to be assigned to Link:
	//	*ZMetricFlowLink_SubNet
	//	*ZMetricFlowLink_Eid
	Link                 isZMetricFlowLink_Link `protobuf_oneof:"Link"`
	SpiId                string                 `protobuf:"bytes,3,opt,name=spiId,proto3" json:"spiId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ZMetricFlowLink) Reset()         { *m = ZMetricFlowLink{} }
func (m *ZMetricFlowLink) String() string { return proto.CompactTextString(m) }
func (*ZMetricFlowLink) ProtoMessage()    {}
func (*ZMetricFlowLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{17}
}

func (m *ZMetricFlowLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZMetricFlowLink.Unmarshal(m, b)
}
func (m *ZMetricFlowLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZMetricFlowLink.Marshal(b, m, deterministic)
}
func (m *ZMetricFlowLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZMetricFlowLink.Merge(m, src)
}
func (m *ZMetricFlowLink) XXX_Size() int {
	return xxx_messageInfo_ZMetricFlowLink.Size(m)
}
func (m *ZMetricFlowLink) XXX_DiscardUnknown() {
	xxx_messageInfo_ZMetricFlowLink.DiscardUnknown(m)
}

var xxx_messageInfo_ZMetricFlowLink proto.InternalMessageInfo

type isZMetricFlowLink_Link interface {
	isZMetricFlowLink_Link()
}

type ZMetricFlowLink_SubNet struct {
	SubNet string `protobuf:"bytes,1,opt,name=subNet,proto3,oneof"`
}

type ZMetricFlowLink_Eid struct {
	Eid string `protobuf:"bytes,2,opt,name=eid,proto3,oneof"`
}

func (*ZMetricFlowLink_SubNet) isZMetricFlowLink_Link() {}

func (*ZMetricFlowLink_Eid) isZMetricFlowLink_Link() {}

func (m *ZMetricFlowLink) GetLink() isZMetricFlowLink_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *ZMetricFlowLink) GetSubNet() string {
	if x, ok := m.GetLink().(*ZMetricFlowLink_SubNet); ok {
		return x.SubNet
	}
	return ""
}

func (m *ZMetricFlowLink) GetEid() string {
	if x, ok := m.GetLink().(*ZMetricFlowLink_Eid); ok {
		return x.Eid
	}
	return ""
}

func (m *ZMetricFlowLink) GetSpiId() string {
	if m != nil {
		return m.SpiId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ZMetricFlowLink) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ZMetricFlowLink_SubNet)(nil),
		(*ZMetricFlowLink_Eid)(nil),
	}
}

type ZMetricFlowEndPoint struct {
	// Types that are valid to be assigned to Endpoint:
	//	*ZMetricFlowEndPoint_IpAddr
	//	*ZMetricFlowEndPoint_Rloc
	Endpoint             isZMetricFlowEndPoint_Endpoint `protobuf_oneof:"Endpoint"`
	Link                 []*ZMetricFlowLink             `protobuf:"bytes,5,rep,name=link,proto3" json:"link,omitempty"`
	Stats                *PktStat                       `protobuf:"bytes,10,opt,name=stats,proto3" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ZMetricFlowEndPoint) Reset()         { *m = ZMetricFlowEndPoint{} }
func (m *ZMetricFlowEndPoint) String() string { return proto.CompactTextString(m) }
func (*ZMetricFlowEndPoint) ProtoMessage()    {}
func (*ZMetricFlowEndPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{18}
}

func (m *ZMetricFlowEndPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZMetricFlowEndPoint.Unmarshal(m, b)
}
func (m *ZMetricFlowEndPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZMetricFlowEndPoint.Marshal(b, m, deterministic)
}
func (m *ZMetricFlowEndPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZMetricFlowEndPoint.Merge(m, src)
}
func (m *ZMetricFlowEndPoint) XXX_Size() int {
	return xxx_messageInfo_ZMetricFlowEndPoint.Size(m)
}
func (m *ZMetricFlowEndPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_ZMetricFlowEndPoint.DiscardUnknown(m)
}

var xxx_messageInfo_ZMetricFlowEndPoint proto.InternalMessageInfo

type isZMetricFlowEndPoint_Endpoint interface {
	isZMetricFlowEndPoint_Endpoint()
}

type ZMetricFlowEndPoint_IpAddr struct {
	IpAddr string `protobuf:"bytes,1,opt,name=ipAddr,proto3,oneof"`
}

type ZMetricFlowEndPoint_Rloc struct {
	Rloc string `protobuf:"bytes,2,opt,name=rloc,proto3,oneof"`
}

func (*ZMetricFlowEndPoint_IpAddr) isZMetricFlowEndPoint_Endpoint() {}

func (*ZMetricFlowEndPoint_Rloc) isZMetricFlowEndPoint_Endpoint() {}

func (m *ZMetricFlowEndPoint) GetEndpoint() isZMetricFlowEndPoint_Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

func (m *ZMetricFlowEndPoint) GetIpAddr() string {
	if x, ok := m.GetEndpoint().(*ZMetricFlowEndPoint_IpAddr); ok {
		return x.IpAddr
	}
	return ""
}

func (m *ZMetricFlowEndPoint) GetRloc() string {
	if x, ok := m.GetEndpoint().(*ZMetricFlowEndPoint_Rloc); ok {
		return x.Rloc
	}
	return ""
}

func (m *ZMetricFlowEndPoint) GetLink() []*ZMetricFlowLink {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *ZMetricFlowEndPoint) GetStats() *PktStat {
	if m != nil {
		return m.Stats
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ZMetricFlowEndPoint) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ZMetricFlowEndPoint_IpAddr)(nil),
		(*ZMetricFlowEndPoint_Rloc)(nil),
	}
}

type ZMetricFlow struct {
	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 uint32                 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Iid                  uint64                 `protobuf:"varint,4,opt,name=iid,proto3" json:"iid,omitempty"`
	EstTime              uint64                 `protobuf:"varint,5,opt,name=estTime,proto3" json:"estTime,omitempty"`
	LEndPoint            *ZMetricFlowEndPoint   `protobuf:"bytes,10,opt,name=lEndPoint,proto3" json:"lEndPoint,omitempty"`
	REndPoint            []*ZMetricFlowEndPoint `protobuf:"bytes,11,rep,name=rEndPoint,proto3" json:"rEndPoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ZMetricFlow) Reset()         { *m = ZMetricFlow{} }
func (m *ZMetricFlow) String() string { return proto.CompactTextString(m) }
func (*ZMetricFlow) ProtoMessage()    {}
func (*ZMetricFlow) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{19}
}

func (m *ZMetricFlow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZMetricFlow.Unmarshal(m, b)
}
func (m *ZMetricFlow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZMetricFlow.Marshal(b, m, deterministic)
}
func (m *ZMetricFlow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZMetricFlow.Merge(m, src)
}
func (m *ZMetricFlow) XXX_Size() int {
	return xxx_messageInfo_ZMetricFlow.Size(m)
}
func (m *ZMetricFlow) XXX_DiscardUnknown() {
	xxx_messageInfo_ZMetricFlow.DiscardUnknown(m)
}

var xxx_messageInfo_ZMetricFlow proto.InternalMessageInfo

func (m *ZMetricFlow) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ZMetricFlow) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ZMetricFlow) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ZMetricFlow) GetIid() uint64 {
	if m != nil {
		return m.Iid
	}
	return 0
}

func (m *ZMetricFlow) GetEstTime() uint64 {
	if m != nil {
		return m.EstTime
	}
	return 0
}

func (m *ZMetricFlow) GetLEndPoint() *ZMetricFlowEndPoint {
	if m != nil {
		return m.LEndPoint
	}
	return nil
}

func (m *ZMetricFlow) GetREndPoint() []*ZMetricFlowEndPoint {
	if m != nil {
		return m.REndPoint
	}
	return nil
}

type ZMetricLispGlobal struct {
	// Encap/ITR Statistics
	ItrPacketSendError *PktStat `protobuf:"bytes,2,opt,name=ItrPacketSendError,proto3" json:"ItrPacketSendError,omitempty"`
	InvalidEidError    *PktStat `protobuf:"bytes,3,opt,name=InvalidEidError,proto3" json:"InvalidEidError,omitempty"`
	// Decap/ETR Statistics
	NoDecryptKey         *PktStat `protobuf:"bytes,4,opt,name=NoDecryptKey,proto3" json:"NoDecryptKey,omitempty"`
	OuterHeaderError     *PktStat `protobuf:"bytes,5,opt,name=OuterHeaderError,proto3" json:"OuterHeaderError,omitempty"`
	BadInnerVersion      *PktStat `protobuf:"bytes,6,opt,name=BadInnerVersion,proto3" json:"BadInnerVersion,omitempty"`
	GoodPackets          *PktStat `protobuf:"bytes,7,opt,name=GoodPackets,proto3" json:"GoodPackets,omitempty"`
	ICVError             *PktStat `protobuf:"bytes,8,opt,name=ICVError,proto3" json:"ICVError,omitempty"`
	LispHeaderError      *PktStat `protobuf:"bytes,9,opt,name=LispHeaderError,proto3" json:"LispHeaderError,omitempty"`
	CheckSumError        *PktStat `protobuf:"bytes,10,opt,name=CheckSumError,proto3" json:"CheckSumError,omitempty"`
	DecapReInjectError   *PktStat `protobuf:"bytes,11,opt,name=DecapReInjectError,proto3" json:"DecapReInjectError,omitempty"`
	DecryptError         *PktStat `protobuf:"bytes,12,opt,name=DecryptError,proto3" json:"DecryptError,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZMetricLispGlobal) Reset()         { *m = ZMetricLispGlobal{} }
func (m *ZMetricLispGlobal) String() string { return proto.CompactTextString(m) }
func (*ZMetricLispGlobal) ProtoMessage()    {}
func (*ZMetricLispGlobal) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{20}
}

func (m *ZMetricLispGlobal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZMetricLispGlobal.Unmarshal(m, b)
}
func (m *ZMetricLispGlobal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZMetricLispGlobal.Marshal(b, m, deterministic)
}
func (m *ZMetricLispGlobal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZMetricLispGlobal.Merge(m, src)
}
func (m *ZMetricLispGlobal) XXX_Size() int {
	return xxx_messageInfo_ZMetricLispGlobal.Size(m)
}
func (m *ZMetricLispGlobal) XXX_DiscardUnknown() {
	xxx_messageInfo_ZMetricLispGlobal.DiscardUnknown(m)
}

var xxx_messageInfo_ZMetricLispGlobal proto.InternalMessageInfo

func (m *ZMetricLispGlobal) GetItrPacketSendError() *PktStat {
	if m != nil {
		return m.ItrPacketSendError
	}
	return nil
}

func (m *ZMetricLispGlobal) GetInvalidEidError() *PktStat {
	if m != nil {
		return m.InvalidEidError
	}
	return nil
}

func (m *ZMetricLispGlobal) GetNoDecryptKey() *PktStat {
	if m != nil {
		return m.NoDecryptKey
	}
	return nil
}

func (m *ZMetricLispGlobal) GetOuterHeaderError() *PktStat {
	if m != nil {
		return m.OuterHeaderError
	}
	return nil
}

func (m *ZMetricLispGlobal) GetBadInnerVersion() *PktStat {
	if m != nil {
		return m.BadInnerVersion
	}
	return nil
}

func (m *ZMetricLispGlobal) GetGoodPackets() *PktStat {
	if m != nil {
		return m.GoodPackets
	}
	return nil
}

func (m *ZMetricLispGlobal) GetICVError() *PktStat {
	if m != nil {
		return m.ICVError
	}
	return nil
}

func (m *ZMetricLispGlobal) GetLispHeaderError() *PktStat {
	if m != nil {
		return m.LispHeaderError
	}
	return nil
}

func (m *ZMetricLispGlobal) GetCheckSumError() *PktStat {
	if m != nil {
		return m.CheckSumError
	}
	return nil
}

func (m *ZMetricLispGlobal) GetDecapReInjectError() *PktStat {
	if m != nil {
		return m.DecapReInjectError
	}
	return nil
}

func (m *ZMetricLispGlobal) GetDecryptError() *PktStat {
	if m != nil {
		return m.DecryptError
	}
	return nil
}

type NetworkStats struct {
	TotalPackets         uint64   `protobuf:"varint,1,opt,name=totalPackets,proto3" json:"totalPackets,omitempty"`
	Errors               uint64   `protobuf:"varint,2,opt,name=errors,proto3" json:"errors,omitempty"`
	Drops                uint64   `protobuf:"varint,3,opt,name=drops,proto3" json:"drops,omitempty"`
	TotalBytes           uint64   `protobuf:"varint,4,opt,name=totalBytes,proto3" json:"totalBytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkStats) Reset()         { *m = NetworkStats{} }
func (m *NetworkStats) String() string { return proto.CompactTextString(m) }
func (*NetworkStats) ProtoMessage()    {}
func (*NetworkStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{21}
}

func (m *NetworkStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkStats.Unmarshal(m, b)
}
func (m *NetworkStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkStats.Marshal(b, m, deterministic)
}
func (m *NetworkStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkStats.Merge(m, src)
}
func (m *NetworkStats) XXX_Size() int {
	return xxx_messageInfo_NetworkStats.Size(m)
}
func (m *NetworkStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkStats.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkStats proto.InternalMessageInfo

func (m *NetworkStats) GetTotalPackets() uint64 {
	if m != nil {
		return m.TotalPackets
	}
	return 0
}

func (m *NetworkStats) GetErrors() uint64 {
	if m != nil {
		return m.Errors
	}
	return 0
}

func (m *NetworkStats) GetDrops() uint64 {
	if m != nil {
		return m.Drops
	}
	return 0
}

func (m *NetworkStats) GetTotalBytes() uint64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

type ZMetricNetworkStats struct {
	Rx                   *NetworkStats `protobuf:"bytes,1,opt,name=rx,proto3" json:"rx,omitempty"`
	Tx                   *NetworkStats `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ZMetricNetworkStats) Reset()         { *m = ZMetricNetworkStats{} }
func (m *ZMetricNetworkStats) String() string { return proto.CompactTextString(m) }
func (*ZMetricNetworkStats) ProtoMessage()    {}
func (*ZMetricNetworkStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{22}
}

func (m *ZMetricNetworkStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZMetricNetworkStats.Unmarshal(m, b)
}
func (m *ZMetricNetworkStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZMetricNetworkStats.Marshal(b, m, deterministic)
}
func (m *ZMetricNetworkStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZMetricNetworkStats.Merge(m, src)
}
func (m *ZMetricNetworkStats) XXX_Size() int {
	return xxx_messageInfo_ZMetricNetworkStats.Size(m)
}
func (m *ZMetricNetworkStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ZMetricNetworkStats.DiscardUnknown(m)
}

var xxx_messageInfo_ZMetricNetworkStats proto.InternalMessageInfo

func (m *ZMetricNetworkStats) GetRx() *NetworkStats {
	if m != nil {
		return m.Rx
	}
	return nil
}

func (m *ZMetricNetworkStats) GetTx() *NetworkStats {
	if m != nil {
		return m.Tx
	}
	return nil
}

type ZProbeNIMetrics struct {
	CurrentIntf          string                              `protobuf:"bytes,1,opt,name=currentIntf,proto3" json:"currentIntf,omitempty"`
	RemoteEndpoint       string                              `protobuf:"bytes,2,opt,name=remoteEndpoint,proto3" json:"remoteEndpoint,omitempty"`
	PingIntv             uint32                              `protobuf:"varint,3,opt,name=pingIntv,proto3" json:"pingIntv,omitempty"`
	RemotePingIntv       uint32                              `protobuf:"varint,4,opt,name=remotePingIntv,proto3" json:"remotePingIntv,omitempty"`
	UplinkCnt            uint32                              `protobuf:"varint,5,opt,name=uplinkCnt,proto3" json:"uplinkCnt,omitempty"`
	IntfMetric           []*ZProbeNIMetrics_ZProbeIntfMetric `protobuf:"bytes,10,rep,name=intfMetric,proto3" json:"intfMetric,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *ZProbeNIMetrics) Reset()         { *m = ZProbeNIMetrics{} }
func (m *ZProbeNIMetrics) String() string { return proto.CompactTextString(m) }
func (*ZProbeNIMetrics) ProtoMessage()    {}
func (*ZProbeNIMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{23}
}

func (m *ZProbeNIMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZProbeNIMetrics.Unmarshal(m, b)
}
func (m *ZProbeNIMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZProbeNIMetrics.Marshal(b, m, deterministic)
}
func (m *ZProbeNIMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZProbeNIMetrics.Merge(m, src)
}
func (m *ZProbeNIMetrics) XXX_Size() int {
	return xxx_messageInfo_ZProbeNIMetrics.Size(m)
}
func (m *ZProbeNIMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_ZProbeNIMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_ZProbeNIMetrics proto.InternalMessageInfo

func (m *ZProbeNIMetrics) GetCurrentIntf() string {
	if m != nil {
		return m.CurrentIntf
	}
	return ""
}

func (m *ZProbeNIMetrics) GetRemoteEndpoint() string {
	if m != nil {
		return m.RemoteEndpoint
	}
	return ""
}

func (m *ZProbeNIMetrics) GetPingIntv() uint32 {
	if m != nil {
		return m.PingIntv
	}
	return 0
}

func (m *ZProbeNIMetrics) GetRemotePingIntv() uint32 {
	if m != nil {
		return m.RemotePingIntv
	}
	return 0
}

func (m *ZProbeNIMetrics) GetUplinkCnt() uint32 {
	if m != nil {
		return m.UplinkCnt
	}
	return 0
}

func (m *ZProbeNIMetrics) GetIntfMetric() []*ZProbeNIMetrics_ZProbeIntfMetric {
	if m != nil {
		return m.IntfMetric
	}
	return nil
}

type ZProbeNIMetrics_ZProbeIntfMetric struct {
	IntfName             string   `protobuf:"bytes,11,opt,name=intfName,proto3" json:"intfName,omitempty"`
	GatewayNexhtop       string   `protobuf:"bytes,12,opt,name=gatewayNexhtop,proto3" json:"gatewayNexhtop,omitempty"`
	GatewayUP            bool     `protobuf:"varint,13,opt,name=gatewayUP,proto3" json:"gatewayUP,omitempty"`
	RemoteHostUP         bool     `protobuf:"varint,14,opt,name=remoteHostUP,proto3" json:"remoteHostUP,omitempty"`
	NexthopUpCount       uint32   `protobuf:"varint,15,opt,name=nexthopUpCount,proto3" json:"nexthopUpCount,omitempty"`
	NexthopDownCount     uint32   `protobuf:"varint,16,opt,name=nexthopDownCount,proto3" json:"nexthopDownCount,omitempty"`
	RemoteUpCount        uint32   `protobuf:"varint,17,opt,name=remoteUpCount,proto3" json:"remoteUpCount,omitempty"`
	RemoteDownCount      uint32   `protobuf:"varint,18,opt,name=remoteDownCount,proto3" json:"remoteDownCount,omitempty"`
	RemoteProbeLatency   uint32   `protobuf:"varint,19,opt,name=remoteProbeLatency,proto3" json:"remoteProbeLatency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZProbeNIMetrics_ZProbeIntfMetric) Reset()         { *m = ZProbeNIMetrics_ZProbeIntfMetric{} }
func (m *ZProbeNIMetrics_ZProbeIntfMetric) String() string { return proto.CompactTextString(m) }
func (*ZProbeNIMetrics_ZProbeIntfMetric) ProtoMessage()    {}
func (*ZProbeNIMetrics_ZProbeIntfMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{23, 0}
}

func (m *ZProbeNIMetrics_ZProbeIntfMetric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZProbeNIMetrics_ZProbeIntfMetric.Unmarshal(m, b)
}
func (m *ZProbeNIMetrics_ZProbeIntfMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZProbeNIMetrics_ZProbeIntfMetric.Marshal(b, m, deterministic)
}
func (m *ZProbeNIMetrics_ZProbeIntfMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZProbeNIMetrics_ZProbeIntfMetric.Merge(m, src)
}
func (m *ZProbeNIMetrics_ZProbeIntfMetric) XXX_Size() int {
	return xxx_messageInfo_ZProbeNIMetrics_ZProbeIntfMetric.Size(m)
}
func (m *ZProbeNIMetrics_ZProbeIntfMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_ZProbeNIMetrics_ZProbeIntfMetric.DiscardUnknown(m)
}

var xxx_messageInfo_ZProbeNIMetrics_ZProbeIntfMetric proto.InternalMessageInfo

func (m *ZProbeNIMetrics_ZProbeIntfMetric) GetIntfName() string {
	if m != nil {
		return m.IntfName
	}
	return ""
}

func (m *ZProbeNIMetrics_ZProbeIntfMetric) GetGatewayNexhtop() string {
	if m != nil {
		return m.GatewayNexhtop
	}
	return ""
}

func (m *ZProbeNIMetrics_ZProbeIntfMetric) GetGatewayUP() bool {
	if m != nil {
		return m.GatewayUP
	}
	return false
}

func (m *ZProbeNIMetrics_ZProbeIntfMetric) GetRemoteHostUP() bool {
	if m != nil {
		return m.RemoteHostUP
	}
	return false
}

func (m *ZProbeNIMetrics_ZProbeIntfMetric) GetNexthopUpCount() uint32 {
	if m != nil {
		return m.NexthopUpCount
	}
	return 0
}

func (m *ZProbeNIMetrics_ZProbeIntfMetric) GetNexthopDownCount() uint32 {
	if m != nil {
		return m.NexthopDownCount
	}
	return 0
}

func (m *ZProbeNIMetrics_ZProbeIntfMetric) GetRemoteUpCount() uint32 {
	if m != nil {
		return m.RemoteUpCount
	}
	return 0
}

func (m *ZProbeNIMetrics_ZProbeIntfMetric) GetRemoteDownCount() uint32 {
	if m != nil {
		return m.RemoteDownCount
	}
	return 0
}

func (m *ZProbeNIMetrics_ZProbeIntfMetric) GetRemoteProbeLatency() uint32 {
	if m != nil {
		return m.RemoteProbeLatency
	}
	return 0
}

type ZMetricNetworkInstance struct {
	NetworkID      string           `protobuf:"bytes,2,opt,name=networkID,proto3" json:"networkID,omitempty"`
	NetworkVersion string           `protobuf:"bytes,3,opt,name=networkVersion,proto3" json:"networkVersion,omitempty"`
	InstType       uint32           `protobuf:"varint,5,opt,name=instType,proto3" json:"instType,omitempty"`
	Displayname    string           `protobuf:"bytes,6,opt,name=displayname,proto3" json:"displayname,omitempty"`
	Activated      bool             `protobuf:"varint,7,opt,name=activated,proto3" json:"activated,omitempty"`
	Network        []*NetworkMetric `protobuf:"bytes,10,rep,name=network,proto3" json:"network,omitempty"`
	ProbeMetric    *ZProbeNIMetrics `protobuf:"bytes,12,opt,name=probeMetric,proto3" json:"probeMetric,omitempty"`
	// Types that are valid to be assigned to InstanceContent:
	//	*ZMetricNetworkInstance_Vpnm
	//	*ZMetricNetworkInstance_Lispm
	//	*ZMetricNetworkInstance_Nonem
	InstanceContent      isZMetricNetworkInstance_InstanceContent `protobuf_oneof:"InstanceContent"`
	FlowStats            []*ZMetricFlow                           `protobuf:"bytes,30,rep,name=flowStats,proto3" json:"flowStats,omitempty"`
	LispGlobalStats      *ZMetricLispGlobal                       `protobuf:"bytes,31,opt,name=lispGlobalStats,proto3" json:"lispGlobalStats,omitempty"`
	NetworkStats         *ZMetricNetworkStats                     `protobuf:"bytes,40,opt,name=networkStats,proto3" json:"networkStats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *ZMetricNetworkInstance) Reset()         { *m = ZMetricNetworkInstance{} }
func (m *ZMetricNetworkInstance) String() string { return proto.CompactTextString(m) }
func (*ZMetricNetworkInstance) ProtoMessage()    {}
func (*ZMetricNetworkInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{24}
}

func (m *ZMetricNetworkInstance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZMetricNetworkInstance.Unmarshal(m, b)
}
func (m *ZMetricNetworkInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZMetricNetworkInstance.Marshal(b, m, deterministic)
}
func (m *ZMetricNetworkInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZMetricNetworkInstance.Merge(m, src)
}
func (m *ZMetricNetworkInstance) XXX_Size() int {
	return xxx_messageInfo_ZMetricNetworkInstance.Size(m)
}
func (m *ZMetricNetworkInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_ZMetricNetworkInstance.DiscardUnknown(m)
}

var xxx_messageInfo_ZMetricNetworkInstance proto.InternalMessageInfo

func (m *ZMetricNetworkInstance) GetNetworkID() string {
	if m != nil {
		return m.NetworkID
	}
	return ""
}

func (m *ZMetricNetworkInstance) GetNetworkVersion() string {
	if m != nil {
		return m.NetworkVersion
	}
	return ""
}

func (m *ZMetricNetworkInstance) GetInstType() uint32 {
	if m != nil {
		return m.InstType
	}
	return 0
}

func (m *ZMetricNetworkInstance) GetDisplayname() string {
	if m != nil {
		return m.Displayname
	}
	return ""
}

func (m *ZMetricNetworkInstance) GetActivated() bool {
	if m != nil {
		return m.Activated
	}
	return false
}

func (m *ZMetricNetworkInstance) GetNetwork() []*NetworkMetric {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *ZMetricNetworkInstance) GetProbeMetric() *ZProbeNIMetrics {
	if m != nil {
		return m.ProbeMetric
	}
	return nil
}

type isZMetricNetworkInstance_InstanceContent interface {
	isZMetricNetworkInstance_InstanceContent()
}

type ZMetricNetworkInstance_Vpnm struct {
	Vpnm *ZMetricVpn `protobuf:"bytes,20,opt,name=vpnm,proto3,oneof"`
}

type ZMetricNetworkInstance_Lispm struct {
	Lispm *ZMetricLisp `protobuf:"bytes,21,opt,name=lispm,proto3,oneof"`
}

type ZMetricNetworkInstance_Nonem struct {
	Nonem *ZMetricNone `protobuf:"bytes,22,opt,name=nonem,proto3,oneof"`
}

func (*ZMetricNetworkInstance_Vpnm) isZMetricNetworkInstance_InstanceContent() {}

func (*ZMetricNetworkInstance_Lispm) isZMetricNetworkInstance_InstanceContent() {}

func (*ZMetricNetworkInstance_Nonem) isZMetricNetworkInstance_InstanceContent() {}

func (m *ZMetricNetworkInstance) GetInstanceContent() isZMetricNetworkInstance_InstanceContent {
	if m != nil {
		return m.InstanceContent
	}
	return nil
}

func (m *ZMetricNetworkInstance) GetVpnm() *ZMetricVpn {
	if x, ok := m.GetInstanceContent().(*ZMetricNetworkInstance_Vpnm); ok {
		return x.Vpnm
	}
	return nil
}

func (m *ZMetricNetworkInstance) GetLispm() *ZMetricLisp {
	if x, ok := m.GetInstanceContent().(*ZMetricNetworkInstance_Lispm); ok {
		return x.Lispm
	}
	return nil
}

func (m *ZMetricNetworkInstance) GetNonem() *ZMetricNone {
	if x, ok := m.GetInstanceContent().(*ZMetricNetworkInstance_Nonem); ok {
		return x.Nonem
	}
	return nil
}

func (m *ZMetricNetworkInstance) GetFlowStats() []*ZMetricFlow {
	if m != nil {
		return m.FlowStats
	}
	return nil
}

func (m *ZMetricNetworkInstance) GetLispGlobalStats() *ZMetricLispGlobal {
	if m != nil {
		return m.LispGlobalStats
	}
	return nil
}

func (m *ZMetricNetworkInstance) GetNetworkStats() *ZMetricNetworkStats {
	if m != nil {
		return m.NetworkStats
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ZMetricNetworkInstance) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ZMetricNetworkInstance_Vpnm)(nil),
		(*ZMetricNetworkInstance_Lispm)(nil),
		(*ZMetricNetworkInstance_Nonem)(nil),
	}
}

// This is the request payload for POST /api/v1/edgeDevice/metrics
// ZMetricMsg carries periodic metrics; typically one message is sent for
// all of the objects on a device (the device itself plus all of the app instances
// and all of the network instances). As such there is normally no need to
// retransmit these messages if there is some network failure; the next periodic
// message will include the cumulative numbers.
// The message is assumed to be protected by a TLS session bound to the
// device certificate.
type ZMetricMsg struct {
	DevID string `protobuf:"bytes,1,opt,name=devID,proto3" json:"devID,omitempty"`
	// deprecated = 2;
	AtTimeStamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=atTimeStamp,proto3" json:"atTimeStamp,omitempty"`
	// Types that are valid to be assigned to MetricContent:
	//	*ZMetricMsg_Dm
	MetricContent isZMetricMsg_MetricContent `protobuf_oneof:"MetricContent"`
	Am            []*AppMetric               `protobuf:"bytes,5,rep,name=am,proto3" json:"am,omitempty"`
	// deprecated = 6;
	Nm                   []*ZMetricNetworkInstance `protobuf:"bytes,7,rep,name=nm,proto3" json:"nm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ZMetricMsg) Reset()         { *m = ZMetricMsg{} }
func (m *ZMetricMsg) String() string { return proto.CompactTextString(m) }
func (*ZMetricMsg) ProtoMessage()    {}
func (*ZMetricMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{25}
}

func (m *ZMetricMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZMetricMsg.Unmarshal(m, b)
}
func (m *ZMetricMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZMetricMsg.Marshal(b, m, deterministic)
}
func (m *ZMetricMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZMetricMsg.Merge(m, src)
}
func (m *ZMetricMsg) XXX_Size() int {
	return xxx_messageInfo_ZMetricMsg.Size(m)
}
func (m *ZMetricMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ZMetricMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ZMetricMsg proto.InternalMessageInfo

func (m *ZMetricMsg) GetDevID() string {
	if m != nil {
		return m.DevID
	}
	return ""
}

func (m *ZMetricMsg) GetAtTimeStamp() *timestamp.Timestamp {
	if m != nil {
		return m.AtTimeStamp
	}
	return nil
}

type isZMetricMsg_MetricContent interface {
	isZMetricMsg_MetricContent()
}

type ZMetricMsg_Dm struct {
	Dm *DeviceMetric `protobuf:"bytes,4,opt,name=dm,proto3,oneof"`
}

func (*ZMetricMsg_Dm) isZMetricMsg_MetricContent() {}

func (m *ZMetricMsg) GetMetricContent() isZMetricMsg_MetricContent {
	if m != nil {
		return m.MetricContent
	}
	return nil
}

func (m *ZMetricMsg) GetDm() *DeviceMetric {
	if x, ok := m.GetMetricContent().(*ZMetricMsg_Dm); ok {
		return x.Dm
	}
	return nil
}

func (m *ZMetricMsg) GetAm() []*AppMetric {
	if m != nil {
		return m.Am
	}
	return nil
}

func (m *ZMetricMsg) GetNm() []*ZMetricNetworkInstance {
	if m != nil {
		return m.Nm
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ZMetricMsg) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ZMetricMsg_Dm)(nil),
	}
}

func init() {
	proto.RegisterEnum("ZmetricTypes", ZmetricTypes_name, ZmetricTypes_value)
	proto.RegisterEnum("MetricItemType", MetricItemType_name, MetricItemType_value)
	proto.RegisterType((*MemoryMetric)(nil), "memoryMetric")
	proto.RegisterType((*NetworkMetric)(nil), "networkMetric")
	proto.RegisterType((*ZedcloudMetric)(nil), "zedcloudMetric")
	proto.RegisterType((*UrlcloudMetric)(nil), "urlcloudMetric")
	proto.RegisterType((*AppCpuMetric)(nil), "appCpuMetric")
	proto.RegisterType((*DeviceMetric)(nil), "deviceMetric")
	proto.RegisterType((*MetricItem)(nil), "MetricItem")
	proto.RegisterType((*DiskMetric)(nil), "diskMetric")
	proto.RegisterType((*AppDiskMetric)(nil), "appDiskMetric")
	proto.RegisterType((*AppMetric)(nil), "appMetric")
	proto.RegisterType((*PktStat)(nil), "PktStat")
	proto.RegisterType((*RlocStats)(nil), "RlocStats")
	proto.RegisterType((*EidStats)(nil), "EidStats")
	proto.RegisterType((*ZMetricLisp)(nil), "ZMetricLisp")
	proto.RegisterType((*ZMetricConn)(nil), "ZMetricConn")
	proto.RegisterType((*ZMetricVpn)(nil), "ZMetricVpn")
	proto.RegisterType((*ZMetricNone)(nil), "ZMetricNone")
	proto.RegisterType((*ZMetricFlowLink)(nil), "ZMetricFlowLink")
	proto.RegisterType((*ZMetricFlowEndPoint)(nil), "ZMetricFlowEndPoint")
	proto.RegisterType((*ZMetricFlow)(nil), "ZMetricFlow")
	proto.RegisterType((*ZMetricLispGlobal)(nil), "ZMetricLispGlobal")
	proto.RegisterType((*NetworkStats)(nil), "NetworkStats")
	proto.RegisterType((*ZMetricNetworkStats)(nil), "ZMetricNetworkStats")
	proto.RegisterType((*ZProbeNIMetrics)(nil), "ZProbeNIMetrics")
	proto.RegisterType((*ZProbeNIMetrics_ZProbeIntfMetric)(nil), "ZProbeNIMetrics.ZProbeIntfMetric")
	proto.RegisterType((*ZMetricNetworkInstance)(nil), "ZMetricNetworkInstance")
	proto.RegisterType((*ZMetricMsg)(nil), "ZMetricMsg")
}

func init() { proto.RegisterFile("metrics.proto", fileDescriptor_6039342a2ba47b72) }

var fileDescriptor_6039342a2ba47b72 = []byte{
	// 2436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xcd, 0x6e, 0x1c, 0xc7,
	0x11, 0xe6, 0xfe, 0x70, 0xb9, 0x5b, 0xbb, 0xcb, 0x5d, 0xb5, 0x64, 0x66, 0x41, 0x38, 0x22, 0x3d,
	0x91, 0x1d, 0x42, 0x8e, 0x87, 0x01, 0x6d, 0x08, 0x4e, 0xa0, 0x0b, 0xff, 0x2c, 0x2e, 0x22, 0x52,
	0x44, 0x53, 0x12, 0x02, 0x02, 0x39, 0x0c, 0x67, 0x9a, 0xcb, 0x09, 0x67, 0x7a, 0x06, 0x3d, 0x3d,
	0x24, 0xd7, 0xa7, 0x1c, 0x72, 0xf3, 0x3d, 0x79, 0x84, 0x5c, 0x73, 0xf3, 0xcd, 0xaf, 0x11, 0xe4,
	0x05, 0x72, 0x0a, 0x10, 0xe4, 0x96, 0x43, 0x0e, 0x41, 0x75, 0xf7, 0xfc, 0x72, 0xa5, 0xe8, 0x01,
	0x7c, 0xdb, 0xfa, 0xbe, 0xaf, 0x7a, 0xba, 0xab, 0xab, 0xab, 0x7f, 0x16, 0x86, 0x21, 0x93, 0xc2,
	0x77, 0x13, 0x3b, 0x16, 0x91, 0x8c, 0xd6, 0x37, 0x66, 0x51, 0x34, 0x0b, 0xd8, 0xb6, 0xb2, 0x2e,
	0xd2, 0xcb, 0x6d, 0xe9, 0x87, 0x2c, 0x91, 0x4e, 0x18, 0x6b, 0x81, 0xf5, 0xa7, 0x06, 0x0c, 0x42,
	0x16, 0x46, 0x62, 0x7e, 0xac, 0x1c, 0xc9, 0x04, 0x56, 0xd2, 0x84, 0x79, 0xc7, 0x2c, 0x9c, 0x34,
	0x37, 0x1b, 0x5b, 0x43, 0x9a, 0x99, 0x64, 0x1d, 0xba, 0xce, 0x8d, 0xe3, 0x07, 0x48, 0xb5, 0x14,
	0x95, 0xdb, 0xe4, 0x33, 0x58, 0x45, 0xd9, 0x29, 0x13, 0x2e, 0xe3, 0xd2, 0x99, 0xb1, 0x49, 0x7b,
	0xb3, 0xb1, 0xd5, 0xa0, 0x35, 0x94, 0x6c, 0xc1, 0x48, 0xf9, 0x94, 0x84, 0xcb, 0x4a, 0x58, 0x87,
	0xad, 0xef, 0x5b, 0x30, 0xe4, 0x4c, 0xde, 0x46, 0xe2, 0xda, 0xf4, 0xec, 0x11, 0x2c, 0xfb, 0x27,
	0x4e, 0xc8, 0x26, 0x8d, 0xcd, 0xc6, 0x56, 0x8f, 0x6a, 0x03, 0xfb, 0x2b, 0xef, 0xf6, 0xe6, 0x92,
	0x25, 0xaa, 0xbf, 0x6d, 0x9a, 0x99, 0xc8, 0x08, 0xc3, 0xb4, 0x34, 0x23, 0x0a, 0x46, 0xde, 0x1d,
	0x88, 0x28, 0x4e, 0x54, 0x37, 0x95, 0x8f, 0x32, 0xb5, 0x8f, 0x66, 0x96, 0x33, 0x1f, 0xcd, 0xac,
	0x41, 0x47, 0xde, 0x9d, 0x5e, 0xcb, 0x64, 0xd2, 0x55, 0x84, 0xb1, 0x10, 0x17, 0x1a, 0xef, 0x69,
	0x5c, 0x5b, 0x18, 0x2d, 0x79, 0x77, 0x28, 0x44, 0x24, 0x92, 0x09, 0x28, 0x26, 0xb7, 0x91, 0x13,
	0x19, 0xd7, 0xd7, 0x5c, 0x66, 0x93, 0xc7, 0x00, 0xf2, 0x6e, 0xd7, 0x0d, 0x74, 0x27, 0x06, 0x8a,
	0x2d, 0x21, 0xc8, 0x8b, 0x82, 0x1f, 0x6a, 0xbe, 0x40, 0xc8, 0x2f, 0xe1, 0xa1, 0x52, 0x53, 0x47,
	0xb2, 0x97, 0x7e, 0xe8, 0x4b, 0x2d, 0x5c, 0x55, 0xc2, 0x45, 0x14, 0x7a, 0x88, 0x05, 0x1e, 0x23,
	0xed, 0xb1, 0x80, 0x22, 0x1f, 0x43, 0x2f, 0x88, 0x5c, 0x27, 0x50, 0xb3, 0x31, 0x56, 0xb3, 0x51,
	0x00, 0xd6, 0x77, 0x4d, 0x58, 0xfd, 0x96, 0x79, 0x6e, 0x10, 0xa5, 0x9e, 0x99, 0xba, 0x35, 0xe8,
	0xf8, 0x97, 0xa5, 0xb9, 0x33, 0x16, 0x06, 0xe2, 0xd2, 0xf1, 0x83, 0x54, 0xe4, 0xb3, 0x97, 0xdb,
	0x38, 0x15, 0x49, 0xea, 0xba, 0x2c, 0xc9, 0xa7, 0xcf, 0x98, 0xe4, 0x39, 0xf4, 0x03, 0x27, 0x91,
	0xdf, 0x68, 0xa5, 0x9a, 0xc2, 0xfe, 0xce, 0xba, 0xad, 0x53, 0xdd, 0xce, 0x52, 0xdd, 0x7e, 0x9d,
	0xa5, 0x3a, 0x2d, 0xcb, 0x33, 0xef, 0x33, 0xd3, 0xf6, 0xf2, 0x87, 0x79, 0x1b, 0x39, 0xd9, 0x06,
	0x48, 0x45, 0xa0, 0x87, 0x95, 0x4c, 0x3a, 0x9b, 0xad, 0xad, 0xfe, 0xce, 0xc8, 0x4e, 0x45, 0x50,
	0x1a, 0x2e, 0x2d, 0x49, 0xac, 0xff, 0x36, 0x60, 0xb5, 0x4a, 0x93, 0x31, 0xb4, 0x52, 0x11, 0x98,
	0x50, 0xe0, 0x4f, 0xb2, 0x09, 0x7d, 0x29, 0xe6, 0xc7, 0xc9, 0x6c, 0x3f, 0x4a, 0xb9, 0x54, 0xa1,
	0x68, 0xd1, 0x32, 0x44, 0x2c, 0x18, 0x48, 0x31, 0xc7, 0xf4, 0xd5, 0x92, 0x96, 0x92, 0x54, 0x30,
	0xd4, 0x24, 0x8c, 0xcb, 0xbc, 0x99, 0xb6, 0xd6, 0x94, 0x31, 0xf2, 0x04, 0x86, 0x68, 0x17, 0x0d,
	0x2d, 0x2b, 0x51, 0x15, 0xc4, 0x96, 0x04, 0x73, 0x6f, 0xf2, 0x96, 0x3a, 0xba, 0xa5, 0x32, 0x86,
	0x2d, 0xa1, 0x5d, 0xb4, 0xb4, 0xa2, 0x5b, 0xaa, 0x80, 0xd6, 0x6f, 0x61, 0xe0, 0xc4, 0xf1, 0x7e,
	0x9c, 0x9a, 0xb1, 0xef, 0x40, 0x27, 0x8d, 0x31, 0xb6, 0x1f, 0x30, 0x6d, 0x46, 0x89, 0x0b, 0x5f,
	0x46, 0xd2, 0x09, 0xcc, 0x92, 0xd4, 0x86, 0xf5, 0x43, 0x0b, 0x06, 0x1e, 0xbb, 0xf1, 0x5d, 0x66,
	0x9a, 0xfe, 0x14, 0x3a, 0xba, 0x92, 0xa9, 0xf8, 0xf5, 0x77, 0x86, 0x76, 0xb9, 0xb0, 0x51, 0x43,
	0x92, 0x2d, 0x58, 0x31, 0x75, 0x65, 0xd2, 0x52, 0xd3, 0xb7, 0x6a, 0x57, 0xea, 0x0c, 0xcd, 0x68,
	0xf2, 0x39, 0x74, 0xb3, 0x3c, 0x9e, 0xb4, 0xcd, 0x4c, 0x57, 0x13, 0x9b, 0xe6, 0x02, 0xb2, 0x01,
	0x6d, 0xcf, 0x4f, 0xae, 0x4d, 0x4a, 0xf4, 0x6d, 0x34, 0x8c, 0x48, 0x11, 0xe4, 0x73, 0xe8, 0xb9,
	0x59, 0x18, 0x54, 0xac, 0xb0, 0x87, 0xe5, 0xd8, 0xd0, 0x82, 0x27, 0x5f, 0x40, 0x5f, 0x17, 0xf2,
	0xa9, 0x64, 0x21, 0x96, 0x1c, 0xdd, 0xe8, 0x71, 0x8e, 0xd1, 0x32, 0x4f, 0x7e, 0x0d, 0x13, 0x91,
	0x72, 0xac, 0xed, 0x67, 0x32, 0x12, 0xce, 0x8c, 0xbd, 0xba, 0x61, 0xe2, 0x8a, 0x39, 0xde, 0xf1,
	0x9e, 0x29, 0x4b, 0xef, 0xe4, 0x71, 0xf9, 0x3b, 0x71, 0x4c, 0x53, 0xfe, 0xba, 0xa0, 0x8f, 0xf7,
	0x4c, 0xcd, 0x5a, 0x44, 0x91, 0x43, 0x58, 0x4b, 0xe6, 0x89, 0x64, 0xe1, 0x19, 0x13, 0x18, 0xff,
	0xe4, 0x58, 0xc7, 0x79, 0x4f, 0x15, 0xb3, 0x7b, 0x81, 0x7f, 0x87, 0xd8, 0xfa, 0x63, 0x13, 0xa0,
	0x18, 0x10, 0xae, 0x8a, 0x6b, 0x36, 0xcf, 0x56, 0xc5, 0x35, 0x9b, 0x93, 0x9f, 0x41, 0x5b, 0xce,
	0x63, 0xa6, 0xa6, 0x73, 0x75, 0x67, 0x54, 0x1a, 0xfd, 0xeb, 0x79, 0xcc, 0xa8, 0x22, 0xc9, 0x63,
	0xe8, 0x5d, 0x44, 0x51, 0xf0, 0xd6, 0x09, 0x52, 0xa6, 0x56, 0x45, 0xf7, 0x68, 0x89, 0x16, 0x10,
	0xb1, 0xa0, 0x9f, 0xfa, 0x5c, 0x7e, 0xb9, 0xa3, 0x15, 0x98, 0x75, 0xc3, 0xa3, 0x25, 0x5a, 0x06,
	0x33, 0xcd, 0xb3, 0xaf, 0xb4, 0x46, 0xa5, 0x59, 0xa6, 0x31, 0x20, 0xd9, 0x04, 0xb8, 0x0c, 0x22,
	0x47, 0x6a, 0x09, 0x2e, 0x88, 0xe6, 0xd1, 0x12, 0x2d, 0x61, 0xd8, 0x4a, 0x22, 0x85, 0xcf, 0x67,
	0x5a, 0x82, 0x53, 0xdc, 0xc3, 0x56, 0x4a, 0xe0, 0xde, 0x03, 0x18, 0x15, 0xf3, 0xa6, 0x20, 0xeb,
	0x3f, 0x0d, 0x80, 0x22, 0x59, 0x08, 0x31, 0x79, 0xa4, 0xe3, 0xa0, 0x53, 0xe7, 0x63, 0xe8, 0x85,
	0xb8, 0x9a, 0x4e, 0x1d, 0x79, 0xa5, 0xa2, 0xd1, 0xa3, 0x05, 0x80, 0xac, 0x60, 0x8e, 0x57, 0xde,
	0xe9, 0x0a, 0x00, 0xf7, 0x8b, 0x5b, 0xe1, 0x4b, 0xa6, 0x69, 0xbd, 0xdd, 0x95, 0x90, 0xcc, 0xbb,
	0x28, 0x06, 0xc6, 0x5b, 0x2f, 0xf2, 0xcc, 0xbb, 0x28, 0x03, 0x99, 0xb7, 0xe6, 0xf3, 0xa5, 0xb9,
	0x52, 0x5a, 0x9a, 0x38, 0x06, 0xdc, 0xf7, 0xcd, 0x4e, 0xa9, 0x7e, 0x23, 0x76, 0x29, 0x18, 0x33,
	0xe9, 0xa8, 0x7e, 0x5b, 0xdf, 0x35, 0x60, 0xe8, 0xc4, 0xf1, 0xc1, 0xfb, 0x47, 0xbf, 0x09, 0xfd,
	0x58, 0x44, 0x37, 0x7e, 0xe2, 0x47, 0x9c, 0x79, 0x66, 0x9f, 0x28, 0x43, 0xf9, 0xf7, 0x5a, 0xa5,
	0xef, 0xad, 0x43, 0x17, 0xbd, 0x31, 0x53, 0xd4, 0xa8, 0x7b, 0x34, 0xb7, 0xb1, 0xd7, 0x9e, 0x2f,
	0xe4, 0x5c, 0x8d, 0xb7, 0x4b, 0xb5, 0x61, 0xfd, 0xbb, 0x01, 0x3d, 0x27, 0x8e, 0x8b, 0xd3, 0xc6,
	0x6e, 0x1c, 0x4f, 0x0f, 0xb2, 0xd3, 0x86, 0x32, 0x30, 0x1e, 0x4e, 0x1c, 0xbf, 0x65, 0x02, 0xbf,
	0xac, 0xd6, 0x48, 0x8f, 0x96, 0x10, 0xdc, 0xb4, 0x76, 0xe3, 0x58, 0xed, 0x74, 0x7a, 0x9e, 0x32,
	0x93, 0x6c, 0x40, 0xcb, 0x8d, 0x53, 0xd5, 0xc5, 0x7b, 0x0b, 0x1f, 0x99, 0x52, 0xf9, 0x6a, 0x7f,
	0x60, 0xf9, 0x5a, 0x7e, 0x7f, 0xf9, 0xb2, 0x2a, 0x15, 0x69, 0xd5, 0xae, 0x44, 0x5a, 0xc7, 0xd6,
	0xfa, 0x15, 0xac, 0x9c, 0x5e, 0xcb, 0x33, 0xe9, 0x48, 0xec, 0xfa, 0xa9, 0xe3, 0x5e, 0x33, 0x99,
	0xa8, 0x21, 0xb7, 0x69, 0x66, 0x62, 0x28, 0xca, 0x07, 0x2c, 0x6d, 0x58, 0xb7, 0xd0, 0xa3, 0x41,
	0xe4, 0xa2, 0x6f, 0x82, 0x33, 0x80, 0x46, 0x36, 0x6f, 0xf8, 0x9b, 0x3c, 0x86, 0x65, 0x45, 0x9a,
	0x72, 0xdc, 0xb5, 0xcd, 0x97, 0xa8, 0x86, 0xc9, 0x33, 0x58, 0x3b, 0x63, 0x6e, 0xc4, 0xbd, 0xe4,
	0xcc, 0xe7, 0x2e, 0x7b, 0xe9, 0x24, 0x52, 0x7f, 0xd1, 0xcc, 0xe3, 0x3b, 0x58, 0xeb, 0x12, 0xba,
	0x87, 0xbe, 0xa7, 0xdb, 0x18, 0x43, 0x6b, 0x6a, 0xe6, 0xa8, 0x4d, 0xf1, 0x27, 0x22, 0x87, 0xd3,
	0x03, 0x13, 0x7d, 0xfc, 0x49, 0x9e, 0xc1, 0x38, 0xef, 0xe8, 0x21, 0x97, 0xc2, 0x57, 0xcb, 0x04,
	0x63, 0x02, 0x76, 0x4e, 0xd0, 0x7b, 0x1a, 0xeb, 0x1f, 0x6d, 0xe8, 0x9f, 0xeb, 0x68, 0xbd, 0xf4,
	0x93, 0x98, 0x7c, 0x09, 0xa3, 0xec, 0xbb, 0x59, 0x33, 0x0d, 0xd5, 0x4c, 0xcf, 0xce, 0x70, 0x5a,
	0x57, 0x90, 0xaf, 0x81, 0x4c, 0xa5, 0xd0, 0x3d, 0x3f, 0x63, 0xdc, 0x53, 0xa7, 0xbc, 0x7b, 0x11,
	0x59, 0xa0, 0x21, 0x3b, 0x30, 0x9a, 0xf2, 0x1b, 0x27, 0xf0, 0xbd, 0x43, 0xdf, 0xb8, 0xb5, 0x6a,
	0x6e, 0x75, 0x01, 0xf9, 0x05, 0x0c, 0x4e, 0xa2, 0x03, 0xe6, 0x8a, 0x79, 0x2c, 0x7f, 0xc3, 0xb2,
	0x4c, 0x2a, 0x1c, 0x2a, 0x2c, 0xf9, 0x0a, 0xc6, 0xaf, 0x52, 0xc9, 0xc4, 0x11, 0x73, 0x3c, 0x26,
	0xf4, 0x27, 0x96, 0x6b, 0x1e, 0xf7, 0x14, 0xd8, 0xaf, 0x3d, 0xc7, 0x9b, 0x72, 0xce, 0x44, 0xb6,
	0x0e, 0x3a, 0xf5, 0x7e, 0xd5, 0x04, 0xe4, 0x29, 0xf4, 0x5f, 0x44, 0x91, 0x97, 0xe5, 0xd7, 0x4a,
	0x4d, 0x5f, 0x26, 0xc9, 0x13, 0xe8, 0x4e, 0xf7, 0xdf, 0xea, 0xde, 0x74, 0x6b, 0xc2, 0x9c, 0xc1,
	0x5e, 0xe0, 0xa4, 0x94, 0xbb, 0xde, 0xab, 0xf7, 0xa2, 0x26, 0x20, 0x36, 0x0c, 0xf7, 0xaf, 0x98,
	0x7b, 0x7d, 0x96, 0x86, 0xda, 0x03, 0x6a, 0x1e, 0x55, 0x1a, 0xe7, 0xee, 0x80, 0xb9, 0x4e, 0x4c,
	0xd9, 0x94, 0xff, 0x9e, 0xb9, 0x52, 0x3b, 0xf5, 0xeb, 0x73, 0x77, 0x5f, 0x83, 0xf3, 0x60, 0xe2,
	0xac, 0x7d, 0x06, 0xf5, 0x79, 0x28, 0xb3, 0xd6, 0x5f, 0x1a, 0x79, 0xa2, 0xed, 0x47, 0x9c, 0x93,
	0x4d, 0xe8, 0x4c, 0xb9, 0xba, 0x52, 0x34, 0x6a, 0x7e, 0x06, 0x27, 0x16, 0xac, 0xbc, 0x4a, 0xa5,
	0x92, 0xd4, 0x53, 0x29, 0x23, 0x50, 0x73, 0x28, 0x84, 0xd2, 0xd4, 0xf3, 0x26, 0x23, 0x54, 0x44,
	0x1c, 0xe1, 0xab, 0x00, 0x29, 0x65, 0xfb, 0x5e, 0x44, 0xca, 0xb4, 0xf5, 0xd7, 0x06, 0x80, 0xe9,
	0xe9, 0xdb, 0x98, 0x93, 0x2d, 0xe8, 0x62, 0x87, 0x51, 0x69, 0xba, 0x3a, 0xb0, 0x4b, 0x03, 0xa1,
	0x39, 0x4b, 0x3e, 0x83, 0x95, 0xe9, 0x35, 0x53, 0xc2, 0xe6, 0x02, 0x61, 0x46, 0x62, 0x8b, 0x27,
	0x8e, 0x7c, 0xad, 0x84, 0xad, 0x45, 0x2d, 0x66, 0x2c, 0xb6, 0x78, 0x98, 0xc4, 0x4a, 0xd8, 0x5e,
	0xd4, 0xa2, 0x21, 0xad, 0x61, 0x1e, 0xdb, 0x93, 0x88, 0x33, 0xeb, 0x77, 0x30, 0x32, 0xe6, 0x37,
	0x41, 0x74, 0xfb, 0xd2, 0xe7, 0xd7, 0x64, 0x02, 0x9d, 0x24, 0xbd, 0x38, 0x61, 0x7a, 0x0c, 0xb8,
	0x65, 0x1b, 0x9b, 0x10, 0x68, 0x31, 0x5f, 0xef, 0x38, 0x08, 0xa3, 0x81, 0xc5, 0x30, 0x89, 0xfd,
	0xa9, 0xde, 0x6c, 0x7a, 0x54, 0x1b, 0x7b, 0x1d, 0x68, 0x63, 0x5b, 0xd6, 0x9f, 0x1b, 0xf0, 0xb0,
	0xd4, 0xfe, 0x21, 0xf7, 0x4e, 0x23, 0x9f, 0x63, 0x71, 0xed, 0xf8, 0xf1, 0xae, 0xe7, 0x89, 0xe2,
	0x1b, 0xda, 0x26, 0x8f, 0xa0, 0x2d, 0xb0, 0x72, 0x66, 0x1f, 0x51, 0x16, 0x79, 0x02, 0xed, 0xc0,
	0xe7, 0x59, 0x89, 0x1f, 0xdb, 0xb5, 0x3e, 0x53, 0xc5, 0x62, 0x85, 0x4d, 0x54, 0x85, 0xad, 0x27,
	0xb2, 0x86, 0xf7, 0x00, 0xba, 0x87, 0xdc, 0x8b, 0xb1, 0x07, 0xd6, 0xdf, 0x8b, 0x24, 0xc3, 0x56,
	0xc8, 0x2a, 0x34, 0x7d, 0xcf, 0xd4, 0xeb, 0xa6, 0xaf, 0xf6, 0x50, 0x5e, 0x6c, 0x5b, 0xea, 0x37,
	0x62, 0xea, 0x00, 0xa6, 0x6f, 0xfb, 0xfa, 0xbc, 0x35, 0x86, 0x96, 0xef, 0x7b, 0xe6, 0x20, 0x81,
	0x3f, 0x71, 0xe3, 0x60, 0x89, 0x54, 0x67, 0x7a, 0x73, 0x67, 0x36, 0x26, 0xd9, 0x81, 0x5e, 0x90,
	0x85, 0xc0, 0xf4, 0xf1, 0x91, 0xbd, 0x20, 0x3c, 0xb4, 0x90, 0xa1, 0x8f, 0xc8, 0x7d, 0xfa, 0x6a,
	0xf8, 0xef, 0xf0, 0xc9, 0x65, 0xd6, 0xf7, 0x6d, 0x78, 0x50, 0xaa, 0xd4, 0x2f, 0x82, 0xe8, 0xc2,
	0x09, 0x7e, 0x2c, 0xbd, 0x3f, 0x96, 0xde, 0xff, 0x5b, 0x7a, 0xff, 0xd0, 0x80, 0xc1, 0x89, 0x3e,
	0x2f, 0xe9, 0x03, 0x05, 0xde, 0xb3, 0xf1, 0x0c, 0x5b, 0x3d, 0x0a, 0x55, 0x30, 0xb2, 0x06, 0x1d,
	0xa6, 0x1f, 0x6f, 0xf4, 0x81, 0xc8, 0x58, 0xea, 0x58, 0xa9, 0x9e, 0x4e, 0xf4, 0xf9, 0x45, 0x1b,
	0xea, 0x41, 0x07, 0xbd, 0x2b, 0x07, 0xf0, 0x02, 0xb1, 0xce, 0xf2, 0x8a, 0x51, 0xe9, 0xc8, 0x4f,
	0xa1, 0x29, 0xee, 0x4c, 0x55, 0x1d, 0xda, 0x65, 0x8a, 0x36, 0xc5, 0x1d, 0xd2, 0xf2, 0x2e, 0xbf,
	0xe8, 0x56, 0x69, 0x79, 0x67, 0xfd, 0xab, 0x0d, 0xa3, 0xf3, 0x53, 0x11, 0x5d, 0xb0, 0x93, 0xa9,
	0x79, 0x89, 0xc0, 0x73, 0xb4, 0x9b, 0x0a, 0xc1, 0xb8, 0x9c, 0x72, 0x79, 0x69, 0x96, 0x7e, 0x19,
	0x22, 0x9f, 0xc1, 0xaa, 0x60, 0x61, 0x24, 0x59, 0x56, 0x35, 0x4c, 0x35, 0xa8, 0xa1, 0x78, 0xb6,
	0x8e, 0x7d, 0x3e, 0x9b, 0x72, 0x79, 0x93, 0xbd, 0x04, 0x66, 0x76, 0xd1, 0xc6, 0x69, 0xa6, 0x50,
	0x57, 0x2e, 0x5a, 0x43, 0xf1, 0xde, 0x91, 0xc6, 0x58, 0xc5, 0xf6, 0xcd, 0xbd, 0x63, 0x48, 0x0b,
	0x80, 0xec, 0x02, 0xf8, 0x5c, 0x5e, 0x9a, 0xdb, 0x32, 0xa8, 0x32, 0xf0, 0x89, 0x5d, 0x1b, 0x91,
	0xb1, 0xa7, 0xb9, 0x90, 0x96, 0x9c, 0xd6, 0xff, 0xd9, 0x84, 0x71, 0x5d, 0x80, 0x3d, 0x47, 0x89,
	0x3a, 0xa0, 0xf7, 0xf5, 0xad, 0x20, 0xb3, 0xb1, 0xe7, 0x33, 0x47, 0xb2, 0x5b, 0x67, 0x7e, 0xc2,
	0xee, 0xae, 0x64, 0x14, 0xab, 0xdc, 0xe9, 0xd1, 0x1a, 0x8a, 0x3d, 0x37, 0xc8, 0x9b, 0x53, 0xf5,
	0x00, 0xd7, 0xa5, 0x05, 0xa0, 0x9f, 0x4e, 0x70, 0xa4, 0x47, 0x51, 0x22, 0xdf, 0x9c, 0xaa, 0x87,
	0xb7, 0x2e, 0xad, 0x60, 0xf8, 0x25, 0xce, 0xee, 0xe4, 0x55, 0x14, 0xbf, 0x89, 0xf5, 0xcd, 0x6a,
	0xa4, 0x63, 0x54, 0x45, 0xc9, 0x53, 0x18, 0x1b, 0xe4, 0x20, 0xba, 0xe5, 0x5a, 0x39, 0x56, 0xca,
	0x7b, 0xb8, 0x7e, 0x8e, 0xc1, 0x6f, 0x64, 0x4d, 0x3e, 0x50, 0xc2, 0x2a, 0x48, 0xb6, 0x60, 0xa4,
	0x81, 0xa2, 0x41, 0xa2, 0x74, 0x75, 0x98, 0xd8, 0x40, 0xcc, 0x8c, 0x61, 0x08, 0x5f, 0x3a, 0x92,
	0x71, 0x77, 0x3e, 0x79, 0xa8, 0xc4, 0x0b, 0x18, 0xeb, 0x87, 0x36, 0xac, 0x55, 0xf3, 0x78, 0xca,
	0x13, 0xe9, 0x70, 0x97, 0x61, 0xc0, 0xcc, 0x9d, 0x24, 0x3f, 0x98, 0x17, 0x80, 0x0e, 0x86, 0x32,
	0xb2, 0x9a, 0xa6, 0x77, 0xd6, 0x1a, 0xaa, 0xa7, 0x2e, 0x91, 0xea, 0x42, 0xa7, 0xf3, 0x25, 0xb7,
	0x31, 0xb5, 0x3d, 0x3f, 0x89, 0x03, 0x67, 0xae, 0xf6, 0xb0, 0x8e, 0x4e, 0xed, 0x12, 0x84, 0x7d,
	0x70, 0x5c, 0xe9, 0xdf, 0x38, 0x92, 0x79, 0xaa, 0x08, 0x76, 0x69, 0x01, 0x94, 0x2f, 0x55, 0xf0,
	0xfe, 0x4b, 0xd5, 0x8e, 0xba, 0x8c, 0x5e, 0x98, 0x37, 0x27, 0x53, 0x5d, 0xc6, 0xf5, 0xcc, 0xa4,
	0x65, 0x11, 0xf9, 0x04, 0xda, 0x37, 0x31, 0x0f, 0x27, 0x8f, 0x94, 0xb8, 0x6f, 0x17, 0x27, 0x28,
	0xdc, 0xef, 0x91, 0x22, 0x4f, 0x60, 0x39, 0xf0, 0x93, 0x38, 0x9c, 0x7c, 0x54, 0x3d, 0xcb, 0xa8,
	0x3a, 0xba, 0x44, 0x35, 0x89, 0x2a, 0x1e, 0x71, 0x16, 0x4e, 0xd6, 0xaa, 0x2a, 0x3c, 0xd9, 0xa0,
	0x4a, 0x91, 0xe4, 0x29, 0xf4, 0x2e, 0x83, 0xe8, 0x56, 0xdf, 0xbd, 0x1e, 0xab, 0xe1, 0x0c, 0xca,
	0x3b, 0x28, 0x2d, 0x68, 0xf2, 0x1c, 0x46, 0x41, 0xbe, 0x63, 0x6a, 0x8f, 0x0d, 0xd5, 0x36, 0xb1,
	0xef, 0x6d, 0xa8, 0xb4, 0x2e, 0x25, 0x5f, 0xc3, 0x80, 0x97, 0x2a, 0xcf, 0x64, 0xab, 0xba, 0xc5,
	0x57, 0xaa, 0x52, 0x45, 0xb9, 0xf7, 0x00, 0x77, 0x58, 0x9d, 0x1e, 0xfb, 0x11, 0x97, 0x8c, 0x4b,
	0xeb, 0x6f, 0xc5, 0xd9, 0xf2, 0x38, 0x99, 0xa9, 0x62, 0xca, 0x6e, 0x8a, 0xfb, 0xb7, 0x32, 0xc8,
	0x73, 0xe8, 0x3b, 0x52, 0xbf, 0x46, 0x39, 0x61, 0x6c, 0x76, 0xe5, 0xf7, 0x3e, 0xde, 0x96, 0xe4,
	0x64, 0x03, 0x9a, 0x5e, 0x98, 0x5f, 0xaf, 0xcb, 0x8f, 0x87, 0x47, 0x4b, 0xb4, 0xe9, 0x85, 0x64,
	0x1d, 0x9a, 0x4e, 0x68, 0x0e, 0x5d, 0x60, 0xe7, 0x8f, 0x01, 0xb4, 0xe9, 0x84, 0xe4, 0xe7, 0xd0,
	0xe4, 0xe1, 0x64, 0x45, 0x71, 0x3f, 0xb1, 0x17, 0xa7, 0x3a, 0x6d, 0xf2, 0x70, 0x6f, 0x04, 0xc3,
	0xfc, 0x20, 0x8a, 0x23, 0x7b, 0xba, 0x03, 0x83, 0x73, 0xfd, 0xea, 0x83, 0xc9, 0x9a, 0x90, 0x1e,
	0x2c, 0x9f, 0x87, 0x27, 0x51, 0x3c, 0x5e, 0x22, 0x03, 0xe8, 0x9e, 0x87, 0x07, 0xaa, 0x23, 0xe3,
	0x86, 0x26, 0x76, 0xe3, 0x78, 0xdc, 0x7a, 0x7a, 0x09, 0xab, 0xd5, 0xe7, 0x2e, 0xf2, 0x10, 0x46,
	0x05, 0xf2, 0x4a, 0x5e, 0x31, 0x31, 0x5e, 0xaa, 0x82, 0x2f, 0x9c, 0x74, 0x86, 0xcd, 0x7c, 0x04,
	0x0f, 0x0a, 0x50, 0xad, 0x66, 0x26, 0xc6, 0xcd, 0xaa, 0x16, 0xa7, 0x81, 0x8d, 0x5b, 0x7b, 0x47,
	0xb0, 0xe1, 0x46, 0xa1, 0xfd, 0x2d, 0xf3, 0x98, 0xe7, 0xd8, 0xea, 0x29, 0xd3, 0x4e, 0x13, 0xfd,
	0x54, 0xa7, 0xe3, 0x79, 0xfe, 0xe9, 0xcc, 0x97, 0x57, 0xe9, 0x85, 0xed, 0x46, 0xe1, 0x76, 0x70,
	0xf9, 0x05, 0xf3, 0x66, 0x6c, 0x9b, 0xdd, 0xb0, 0x6d, 0x27, 0xf6, 0xb7, 0x67, 0xd1, 0xb6, 0xf9,
	0xc3, 0xe9, 0xa2, 0xa3, 0xd4, 0x5f, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x7a, 0xf5, 0x2c,
	0x82, 0x1a, 0x00, 0x00,
}
