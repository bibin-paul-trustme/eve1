// Code generated by protoc-gen-go. DO NOT EDIT.
// source: storage.proto

package config

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DsType int32

const (
	DsType_DsUnknown           DsType = 0
	DsType_DsHttp              DsType = 1
	DsType_DsHttps             DsType = 2
	DsType_DsS3                DsType = 3
	DsType_DsSFTP              DsType = 4
	DsType_DsContainerRegistry DsType = 5
	DsType_DsAzureBlob         DsType = 6
)

var DsType_name = map[int32]string{
	0: "DsUnknown",
	1: "DsHttp",
	2: "DsHttps",
	3: "DsS3",
	4: "DsSFTP",
	5: "DsContainerRegistry",
	6: "DsAzureBlob",
}

var DsType_value = map[string]int32{
	"DsUnknown":           0,
	"DsHttp":              1,
	"DsHttps":             2,
	"DsS3":                3,
	"DsSFTP":              4,
	"DsContainerRegistry": 5,
	"DsAzureBlob":         6,
}

func (x DsType) String() string {
	return proto.EnumName(DsType_name, int32(x))
}

func (DsType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{0}
}

type Format int32

const (
	Format_FmtUnknown Format = 0
	Format_RAW        Format = 1
	Format_QCOW       Format = 2
	Format_QCOW2      Format = 3
	Format_VHD        Format = 4
	Format_VMDK       Format = 5
	Format_OVA        Format = 6
	Format_VHDX       Format = 7
	Format_CONTAINER  Format = 8
)

var Format_name = map[int32]string{
	0: "FmtUnknown",
	1: "RAW",
	2: "QCOW",
	3: "QCOW2",
	4: "VHD",
	5: "VMDK",
	6: "OVA",
	7: "VHDX",
	8: "CONTAINER",
}

var Format_value = map[string]int32{
	"FmtUnknown": 0,
	"RAW":        1,
	"QCOW":       2,
	"QCOW2":      3,
	"VHD":        4,
	"VMDK":       5,
	"OVA":        6,
	"VHDX":       7,
	"CONTAINER":  8,
}

func (x Format) String() string {
	return proto.EnumName(Format_name, int32(x))
}

func (Format) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{1}
}

type Target int32

const (
	Target_TgtUnknown Target = 0
	Target_Disk       Target = 1
	Target_Kernel     Target = 2
	Target_Initrd     Target = 3
	Target_RamDisk    Target = 4
)

var Target_name = map[int32]string{
	0: "TgtUnknown",
	1: "Disk",
	2: "Kernel",
	3: "Initrd",
	4: "RamDisk",
}

var Target_value = map[string]int32{
	"TgtUnknown": 0,
	"Disk":       1,
	"Kernel":     2,
	"Initrd":     3,
	"RamDisk":    4,
}

func (x Target) String() string {
	return proto.EnumName(Target_name, int32(x))
}

func (Target) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{2}
}

type DriveType int32

const (
	DriveType_Unclassified DriveType = 0
	DriveType_CDROM        DriveType = 1
	DriveType_HDD          DriveType = 2
	DriveType_NET          DriveType = 3
	// this type is allocate the empty disk of maxsizebytes specified
	DriveType_HDD_EMPTY DriveType = 4
)

var DriveType_name = map[int32]string{
	0: "Unclassified",
	1: "CDROM",
	2: "HDD",
	3: "NET",
	4: "HDD_EMPTY",
}

var DriveType_value = map[string]int32{
	"Unclassified": 0,
	"CDROM":        1,
	"HDD":          2,
	"NET":          3,
	"HDD_EMPTY":    4,
}

func (x DriveType) String() string {
	return proto.EnumName(DriveType_name, int32(x))
}

func (DriveType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{3}
}

type SignatureInfo struct {
	Intercertsurl        string   `protobuf:"bytes,1,opt,name=intercertsurl,proto3" json:"intercertsurl,omitempty"`
	Signercerturl        string   `protobuf:"bytes,2,opt,name=signercerturl,proto3" json:"signercerturl,omitempty"`
	Signature            []byte   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignatureInfo) Reset()         { *m = SignatureInfo{} }
func (m *SignatureInfo) String() string { return proto.CompactTextString(m) }
func (*SignatureInfo) ProtoMessage()    {}
func (*SignatureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{0}
}

func (m *SignatureInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignatureInfo.Unmarshal(m, b)
}
func (m *SignatureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignatureInfo.Marshal(b, m, deterministic)
}
func (m *SignatureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureInfo.Merge(m, src)
}
func (m *SignatureInfo) XXX_Size() int {
	return xxx_messageInfo_SignatureInfo.Size(m)
}
func (m *SignatureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureInfo proto.InternalMessageInfo

func (m *SignatureInfo) GetIntercertsurl() string {
	if m != nil {
		return m.Intercertsurl
	}
	return ""
}

func (m *SignatureInfo) GetSignercerturl() string {
	if m != nil {
		return m.Signercerturl
	}
	return ""
}

func (m *SignatureInfo) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type DatastoreConfig struct {
	Id       string `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	DType    DsType `protobuf:"varint,1,opt,name=dType,proto3,enum=DsType" json:"dType,omitempty"`
	Fqdn     string `protobuf:"bytes,2,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	ApiKey   string `protobuf:"bytes,3,opt,name=apiKey,proto3" json:"apiKey,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// depending on datastore types, it could be bucket or path
	Dpath string `protobuf:"bytes,5,opt,name=dpath,proto3" json:"dpath,omitempty"`
	// Applies for some datastore types
	Region string `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	// encrypted password
	CipherTextPassword []byte `protobuf:"bytes,7,opt,name=cipherTextPassword,proto3" json:"cipherTextPassword,omitempty"`
	// cipher information, for encryption/decryption
	CInfo                *CipherInfo `protobuf:"bytes,8,opt,name=cInfo,proto3" json:"cInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DatastoreConfig) Reset()         { *m = DatastoreConfig{} }
func (m *DatastoreConfig) String() string { return proto.CompactTextString(m) }
func (*DatastoreConfig) ProtoMessage()    {}
func (*DatastoreConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{1}
}

func (m *DatastoreConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatastoreConfig.Unmarshal(m, b)
}
func (m *DatastoreConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatastoreConfig.Marshal(b, m, deterministic)
}
func (m *DatastoreConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatastoreConfig.Merge(m, src)
}
func (m *DatastoreConfig) XXX_Size() int {
	return xxx_messageInfo_DatastoreConfig.Size(m)
}
func (m *DatastoreConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DatastoreConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DatastoreConfig proto.InternalMessageInfo

func (m *DatastoreConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DatastoreConfig) GetDType() DsType {
	if m != nil {
		return m.DType
	}
	return DsType_DsUnknown
}

func (m *DatastoreConfig) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

func (m *DatastoreConfig) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *DatastoreConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *DatastoreConfig) GetDpath() string {
	if m != nil {
		return m.Dpath
	}
	return ""
}

func (m *DatastoreConfig) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *DatastoreConfig) GetCipherTextPassword() []byte {
	if m != nil {
		return m.CipherTextPassword
	}
	return nil
}

func (m *DatastoreConfig) GetCInfo() *CipherInfo {
	if m != nil {
		return m.CInfo
	}
	return nil
}

type Image struct {
	Uuidandversion *UUIDandVersion `protobuf:"bytes,1,opt,name=uuidandversion,proto3" json:"uuidandversion,omitempty"`
	// it could be relative path/name as well
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Sha256  string `protobuf:"bytes,3,opt,name=sha256,proto3" json:"sha256,omitempty"`
	Iformat Format `protobuf:"varint,4,opt,name=iformat,proto3,enum=Format" json:"iformat,omitempty"`
	// if its signed image
	Siginfo              *SignatureInfo `protobuf:"bytes,5,opt,name=siginfo,proto3" json:"siginfo,omitempty"`
	DsId                 string         `protobuf:"bytes,6,opt,name=dsId,proto3" json:"dsId,omitempty"`
	SizeBytes            int64          `protobuf:"varint,8,opt,name=sizeBytes,proto3" json:"sizeBytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{2}
}

func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetUuidandversion() *UUIDandVersion {
	if m != nil {
		return m.Uuidandversion
	}
	return nil
}

func (m *Image) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Image) GetSha256() string {
	if m != nil {
		return m.Sha256
	}
	return ""
}

func (m *Image) GetIformat() Format {
	if m != nil {
		return m.Iformat
	}
	return Format_FmtUnknown
}

func (m *Image) GetSiginfo() *SignatureInfo {
	if m != nil {
		return m.Siginfo
	}
	return nil
}

func (m *Image) GetDsId() string {
	if m != nil {
		return m.DsId
	}
	return ""
}

func (m *Image) GetSizeBytes() int64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

type Drive struct {
	Image    *Image    `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Readonly bool      `protobuf:"varint,5,opt,name=readonly,proto3" json:"readonly,omitempty"`
	Preserve bool      `protobuf:"varint,6,opt,name=preserve,proto3" json:"preserve,omitempty"`
	Drvtype  DriveType `protobuf:"varint,8,opt,name=drvtype,proto3,enum=DriveType" json:"drvtype,omitempty"`
	Target   Target    `protobuf:"varint,9,opt,name=target,proto3,enum=Target" json:"target,omitempty"`
	// Initial image need to be resized to this size.
	// A value of 0 will indicate that no resizing is required
	Maxsizebytes         int64    `protobuf:"varint,10,opt,name=maxsizebytes,proto3" json:"maxsizebytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Drive) Reset()         { *m = Drive{} }
func (m *Drive) String() string { return proto.CompactTextString(m) }
func (*Drive) ProtoMessage()    {}
func (*Drive) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{3}
}

func (m *Drive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Drive.Unmarshal(m, b)
}
func (m *Drive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Drive.Marshal(b, m, deterministic)
}
func (m *Drive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Drive.Merge(m, src)
}
func (m *Drive) XXX_Size() int {
	return xxx_messageInfo_Drive.Size(m)
}
func (m *Drive) XXX_DiscardUnknown() {
	xxx_messageInfo_Drive.DiscardUnknown(m)
}

var xxx_messageInfo_Drive proto.InternalMessageInfo

func (m *Drive) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *Drive) GetReadonly() bool {
	if m != nil {
		return m.Readonly
	}
	return false
}

func (m *Drive) GetPreserve() bool {
	if m != nil {
		return m.Preserve
	}
	return false
}

func (m *Drive) GetDrvtype() DriveType {
	if m != nil {
		return m.Drvtype
	}
	return DriveType_Unclassified
}

func (m *Drive) GetTarget() Target {
	if m != nil {
		return m.Target
	}
	return Target_TgtUnknown
}

func (m *Drive) GetMaxsizebytes() int64 {
	if m != nil {
		return m.Maxsizebytes
	}
	return 0
}

func init() {
	proto.RegisterEnum("DsType", DsType_name, DsType_value)
	proto.RegisterEnum("Format", Format_name, Format_value)
	proto.RegisterEnum("Target", Target_name, Target_value)
	proto.RegisterEnum("DriveType", DriveType_name, DriveType_value)
	proto.RegisterType((*SignatureInfo)(nil), "SignatureInfo")
	proto.RegisterType((*DatastoreConfig)(nil), "DatastoreConfig")
	proto.RegisterType((*Image)(nil), "Image")
	proto.RegisterType((*Drive)(nil), "Drive")
}

func init() { proto.RegisterFile("storage.proto", fileDescriptor_0d2c4ccf1453ffdb) }

var fileDescriptor_0d2c4ccf1453ffdb = []byte{
	// 802 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0x6d, 0x6f, 0x22, 0x37,
	0x10, 0xbe, 0x05, 0x76, 0x81, 0x21, 0x21, 0x96, 0x5b, 0xb5, 0xe8, 0x74, 0xd5, 0xe5, 0x50, 0x3e,
	0x44, 0x91, 0xba, 0x48, 0x9c, 0xda, 0x7e, 0x4e, 0xd8, 0xe4, 0x40, 0x51, 0x5e, 0xea, 0x90, 0x5c,
	0xdb, 0x2f, 0x95, 0xb3, 0x36, 0x1b, 0x2b, 0xac, 0xbd, 0xb5, 0x0d, 0x17, 0xf2, 0x0f, 0xfa, 0xcf,
	0xfa, 0x5f, 0xfa, 0x27, 0x2a, 0xdb, 0x90, 0x94, 0xaa, 0xdf, 0x66, 0x9e, 0x99, 0xf5, 0x33, 0xcf,
	0x33, 0xa3, 0x85, 0x5d, 0x63, 0x95, 0xa6, 0x05, 0x4f, 0x2b, 0xad, 0xac, 0x7a, 0xbb, 0xc7, 0xf8,
	0x32, 0x57, 0x65, 0xa9, 0xe4, 0x1a, 0x40, 0xb9, 0xa8, 0x1e, 0xb8, 0x16, 0x72, 0xa6, 0x02, 0xd2,
	0x5f, 0xc1, 0xee, 0x8d, 0x28, 0x24, 0xb5, 0x0b, 0xcd, 0x27, 0x72, 0xa6, 0xf0, 0x01, 0xec, 0x0a,
	0x69, 0xb9, 0xce, 0xb9, 0xb6, 0x66, 0xa1, 0xe7, 0xbd, 0x68, 0x3f, 0x3a, 0x6c, 0x93, 0x6d, 0xd0,
	0x75, 0x19, 0x51, 0xc8, 0x80, 0xb8, 0xae, 0x5a, 0xe8, 0xda, 0x02, 0xf1, 0x3b, 0x68, 0x9b, 0xcd,
	0xe3, 0xbd, 0xfa, 0x7e, 0x74, 0xb8, 0x43, 0x5e, 0x81, 0xfe, 0x9f, 0x35, 0xd8, 0xcb, 0xa8, 0xa5,
	0x6e, 0x66, 0x3e, 0x52, 0x72, 0x26, 0x0a, 0xdc, 0x85, 0x9a, 0x60, 0x3d, 0xe6, 0x1f, 0xab, 0x09,
	0x86, 0xbf, 0x83, 0x98, 0x4d, 0x57, 0x15, 0xf7, 0x53, 0x74, 0x87, 0xcd, 0x34, 0x33, 0x2e, 0x25,
	0x01, 0xc5, 0x18, 0x1a, 0xb3, 0x3f, 0x98, 0x5c, 0xb3, 0xfb, 0x18, 0x7f, 0x03, 0x09, 0xad, 0xc4,
	0x39, 0x5f, 0x79, 0xc6, 0x36, 0x59, 0x67, 0xf8, 0x2d, 0xb4, 0x2a, 0x6a, 0xcc, 0x17, 0xa5, 0x59,
	0xaf, 0xe1, 0x2b, 0x2f, 0x39, 0xfe, 0x1a, 0x62, 0x56, 0x51, 0xfb, 0xd0, 0x8b, 0x7d, 0x21, 0x24,
	0xee, 0x25, 0xcd, 0x0b, 0xa1, 0x64, 0x2f, 0x09, 0x2f, 0x85, 0x0c, 0xa7, 0x80, 0x83, 0x8f, 0x53,
	0xfe, 0x64, 0xaf, 0x37, 0x6f, 0x36, 0xbd, 0xbe, 0xff, 0xa9, 0xe0, 0x0f, 0x10, 0xe7, 0xce, 0xdb,
	0x5e, 0x6b, 0x3f, 0x3a, 0xec, 0x0c, 0x3b, 0xe9, 0xc8, 0xf7, 0x38, 0x88, 0x84, 0x4a, 0xff, 0xef,
	0x08, 0xe2, 0x49, 0x49, 0x0b, 0x8e, 0x7f, 0x82, 0xee, 0x62, 0x21, 0x18, 0x95, 0x6c, 0xc9, 0xb5,
	0x71, 0xe4, 0x91, 0xff, 0x6a, 0x2f, 0xbd, 0xbd, 0x9d, 0x64, 0x54, 0xb2, 0xbb, 0x00, 0x93, 0xff,
	0xb4, 0x39, 0x2f, 0x24, 0x2d, 0xf9, 0xc6, 0x0b, 0x17, 0x3b, 0x05, 0xe6, 0x81, 0x0e, 0x7f, 0xf8,
	0x71, 0xe3, 0x45, 0xc8, 0xf0, 0x07, 0x68, 0x8a, 0x99, 0xd2, 0x25, 0xb5, 0xde, 0x0a, 0x67, 0xec,
	0x99, 0x4f, 0xc9, 0x06, 0xc7, 0x87, 0xd0, 0x34, 0xa2, 0x70, 0x97, 0xe2, 0x4d, 0xe9, 0x0c, 0xbb,
	0xe9, 0xd6, 0xa1, 0x90, 0x4d, 0xd9, 0x11, 0x33, 0x33, 0x61, 0x6b, 0x93, 0x7c, 0x1c, 0x36, 0xff,
	0xcc, 0x4f, 0x56, 0x96, 0x1b, 0x2f, 0xbb, 0x4e, 0x5e, 0x81, 0xfe, 0x5f, 0x11, 0xc4, 0x99, 0x16,
	0x4b, 0x8e, 0xdf, 0x41, 0x2c, 0x9c, 0xec, 0xb5, 0xc8, 0x24, 0xf5, 0x26, 0x90, 0x00, 0xba, 0x95,
	0x69, 0x4e, 0x99, 0x92, 0xf3, 0x95, 0x1f, 0xa2, 0x45, 0x5e, 0x72, 0xbf, 0x4e, 0xcd, 0x0d, 0xd7,
	0x4b, 0xee, 0x99, 0x5b, 0xe4, 0x25, 0xc7, 0x07, 0xd0, 0x64, 0x7a, 0x69, 0xdd, 0xdd, 0xb4, 0xbc,
	0x3c, 0x48, 0x3d, 0x9d, 0x3f, 0x9d, 0x4d, 0x09, 0xbf, 0x87, 0xc4, 0x52, 0x5d, 0x70, 0xdb, 0x6b,
	0xaf, 0x3d, 0x98, 0xfa, 0x94, 0xac, 0x61, 0xdc, 0x87, 0x9d, 0x92, 0x3e, 0xb9, 0xb1, 0xef, 0xbd,
	0x0e, 0xf0, 0x3a, 0xb6, 0xb0, 0xa3, 0x0a, 0x92, 0x70, 0x92, 0x78, 0x17, 0xda, 0x99, 0xb9, 0x95,
	0x8f, 0x52, 0x7d, 0x91, 0xe8, 0x0d, 0x06, 0x57, 0x18, 0x5b, 0x5b, 0xa1, 0x08, 0x77, 0xa0, 0x19,
	0x62, 0x83, 0x6a, 0xb8, 0x05, 0x8d, 0xcc, 0xdc, 0x7c, 0x44, 0xf5, 0xd0, 0x72, 0x73, 0x36, 0xbd,
	0x46, 0x0d, 0xfc, 0x2d, 0x7c, 0x95, 0x99, 0x91, 0x92, 0x96, 0x0a, 0xc9, 0x35, 0xe1, 0x85, 0x30,
	0x56, 0xaf, 0x50, 0x8c, 0xf7, 0xa0, 0x93, 0x99, 0xe3, 0xe7, 0x85, 0xe6, 0x27, 0x73, 0x75, 0x8f,
	0x92, 0xa3, 0x47, 0x48, 0xc2, 0xae, 0x70, 0x17, 0xe0, 0xac, 0xb4, 0xaf, 0x94, 0x4d, 0xa8, 0x93,
	0xe3, 0xcf, 0x28, 0x72, 0x14, 0x3f, 0x8f, 0xae, 0x3e, 0xa3, 0x1a, 0x6e, 0x43, 0xec, 0xa2, 0x21,
	0xaa, 0xbb, 0xea, 0xdd, 0x38, 0x43, 0x0d, 0x57, 0xbd, 0xbb, 0xc8, 0xce, 0x51, 0xec, 0xa0, 0xab,
	0xbb, 0x63, 0x94, 0x78, 0x68, 0x9c, 0xfd, 0x82, 0x9a, 0x4e, 0xc5, 0xe8, 0xea, 0x72, 0x7a, 0x3c,
	0xb9, 0x3c, 0x25, 0xa8, 0x75, 0xf4, 0x09, 0x92, 0x60, 0x8a, 0x23, 0x9b, 0x16, 0xff, 0x22, 0x73,
	0x32, 0x84, 0x79, 0x44, 0x91, 0x93, 0x71, 0xce, 0xb5, 0xe4, 0x73, 0x54, 0x73, 0xf1, 0x44, 0x0a,
	0xab, 0x19, 0xaa, 0x3b, 0xd5, 0x84, 0x96, 0xbe, 0xa9, 0x71, 0x34, 0x81, 0xf6, 0xcb, 0x0a, 0x30,
	0x82, 0x9d, 0x5b, 0x99, 0xcf, 0xa9, 0x31, 0x62, 0x26, 0x38, 0x43, 0x6f, 0xdc, 0x9c, 0xa3, 0x8c,
	0x5c, 0x5d, 0xa0, 0xc8, 0x0d, 0x35, 0xce, 0x32, 0x54, 0x73, 0xc1, 0xe5, 0xe9, 0x14, 0xd5, 0xdd,
	0x4c, 0xe3, 0x2c, 0xfb, 0xfd, 0xf4, 0xe2, 0x7a, 0xfa, 0x2b, 0x6a, 0x9c, 0x7c, 0x82, 0xf7, 0xb9,
	0x2a, 0xd3, 0x67, 0xce, 0x38, 0xa3, 0x69, 0x3e, 0x57, 0x0b, 0x96, 0x2e, 0xdc, 0xe2, 0x45, 0xbe,
	0xfe, 0xf1, 0xfd, 0x76, 0x50, 0x08, 0xfb, 0xb0, 0xb8, 0x4f, 0x73, 0x55, 0x0e, 0xe6, 0xb3, 0xef,
	0x39, 0x2b, 0xf8, 0x80, 0x2f, 0xf9, 0x80, 0x56, 0x62, 0x50, 0xa8, 0x41, 0xee, 0x7f, 0x36, 0xf7,
	0x89, 0x6f, 0xfe, 0xf8, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x68, 0x13, 0x90, 0x64, 0x36, 0x05,
	0x00, 0x00,
}
