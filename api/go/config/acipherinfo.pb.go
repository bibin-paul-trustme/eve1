// Code generated by protoc-gen-go. DO NOT EDIT.
// source: acipherinfo.proto

package config

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CipherHashAlgorithm int32

const (
	CipherHashAlgorithm_HASH_NONE           CipherHashAlgorithm = 0
	CipherHashAlgorithm_HASH_SHA256_16bytes CipherHashAlgorithm = 1
	CipherHashAlgorithm_HASH_SHA256_32bytes CipherHashAlgorithm = 2
)

var CipherHashAlgorithm_name = map[int32]string{
	0: "HASH_NONE",
	1: "HASH_SHA256_16bytes",
	2: "HASH_SHA256_32bytes",
}

var CipherHashAlgorithm_value = map[string]int32{
	"HASH_NONE":           0,
	"HASH_SHA256_16bytes": 1,
	"HASH_SHA256_32bytes": 2,
}

func (x CipherHashAlgorithm) String() string {
	return proto.EnumName(CipherHashAlgorithm_name, int32(x))
}

func (CipherHashAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_665ee3990fbad920, []int{0}
}

// Security Key Exchange Method
type KeyExchangeScheme int32

const (
	KeyExchangeScheme_KEA_NONE KeyExchangeScheme = 0
	KeyExchangeScheme_KEA_ECDH KeyExchangeScheme = 1
)

var KeyExchangeScheme_name = map[int32]string{
	0: "KEA_NONE",
	1: "KEA_ECDH",
}

var KeyExchangeScheme_value = map[string]int32{
	"KEA_NONE": 0,
	"KEA_ECDH": 1,
}

func (x KeyExchangeScheme) String() string {
	return proto.EnumName(KeyExchangeScheme_name, int32(x))
}

func (KeyExchangeScheme) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_665ee3990fbad920, []int{1}
}

// Encryption Scheme for Cipher Payload
type EncryptionScheme int32

const (
	EncryptionScheme_SA_NONE        EncryptionScheme = 0
	EncryptionScheme_SA_AES_256_CFB EncryptionScheme = 1
)

var EncryptionScheme_name = map[int32]string{
	0: "SA_NONE",
	1: "SA_AES_256_CFB",
}

var EncryptionScheme_value = map[string]int32{
	"SA_NONE":        0,
	"SA_AES_256_CFB": 1,
}

func (x EncryptionScheme) String() string {
	return proto.EnumName(EncryptionScheme_name, int32(x))
}

func (EncryptionScheme) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_665ee3990fbad920, []int{2}
}

// Cipher information to decrypt Sensitive Data
type CipherContext struct {
	// cipher context id, key to this structure
	ContextId string `protobuf:"bytes,1,opt,name=contextId,proto3" json:"contextId,omitempty"`
	// algorithm used to compute hash for certificates
	HashScheme CipherHashAlgorithm `protobuf:"varint,2,opt,name=hashScheme,proto3,enum=CipherHashAlgorithm" json:"hashScheme,omitempty"`
	// for key exchange scheme, like ECDH etc.
	KeyExchangeScheme KeyExchangeScheme `protobuf:"varint,3,opt,name=keyExchangeScheme,proto3,enum=KeyExchangeScheme" json:"keyExchangeScheme,omitempty"`
	// for encrypting sensitive data, like AES256 etc.
	EncryptionScheme EncryptionScheme `protobuf:"varint,4,opt,name=encryptionScheme,proto3,enum=EncryptionScheme" json:"encryptionScheme,omitempty"`
	// device public certificate hash
	DeviceCertHash []byte `protobuf:"bytes,5,opt,name=deviceCertHash,proto3" json:"deviceCertHash,omitempty"`
	// controller certificate hash
	ControllerCertHash   []byte   `protobuf:"bytes,6,opt,name=controllerCertHash,proto3" json:"controllerCertHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CipherContext) Reset()         { *m = CipherContext{} }
func (m *CipherContext) String() string { return proto.CompactTextString(m) }
func (*CipherContext) ProtoMessage()    {}
func (*CipherContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_665ee3990fbad920, []int{0}
}

func (m *CipherContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CipherContext.Unmarshal(m, b)
}
func (m *CipherContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CipherContext.Marshal(b, m, deterministic)
}
func (m *CipherContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CipherContext.Merge(m, src)
}
func (m *CipherContext) XXX_Size() int {
	return xxx_messageInfo_CipherContext.Size(m)
}
func (m *CipherContext) XXX_DiscardUnknown() {
	xxx_messageInfo_CipherContext.DiscardUnknown(m)
}

var xxx_messageInfo_CipherContext proto.InternalMessageInfo

func (m *CipherContext) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

func (m *CipherContext) GetHashScheme() CipherHashAlgorithm {
	if m != nil {
		return m.HashScheme
	}
	return CipherHashAlgorithm_HASH_NONE
}

func (m *CipherContext) GetKeyExchangeScheme() KeyExchangeScheme {
	if m != nil {
		return m.KeyExchangeScheme
	}
	return KeyExchangeScheme_KEA_NONE
}

func (m *CipherContext) GetEncryptionScheme() EncryptionScheme {
	if m != nil {
		return m.EncryptionScheme
	}
	return EncryptionScheme_SA_NONE
}

func (m *CipherContext) GetDeviceCertHash() []byte {
	if m != nil {
		return m.DeviceCertHash
	}
	return nil
}

func (m *CipherContext) GetControllerCertHash() []byte {
	if m != nil {
		return m.ControllerCertHash
	}
	return nil
}

// Encrypted sensitive data information
type CipherBlock struct {
	// cipher context id
	CipherContextId string `protobuf:"bytes,1,opt,name=cipherContextId,proto3" json:"cipherContextId,omitempty"`
	// Initial Value for Symmetric Key derivation
	InitialValue []byte `protobuf:"bytes,2,opt,name=initialValue,proto3" json:"initialValue,omitempty"`
	// encrypted sensitive data
	CipherData []byte `protobuf:"bytes,3,opt,name=cipherData,proto3" json:"cipherData,omitempty"`
	// sha256 of the plaintext sensitive data
	ClearTextSha256      []byte   `protobuf:"bytes,4,opt,name=clearTextSha256,proto3" json:"clearTextSha256,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CipherBlock) Reset()         { *m = CipherBlock{} }
func (m *CipherBlock) String() string { return proto.CompactTextString(m) }
func (*CipherBlock) ProtoMessage()    {}
func (*CipherBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_665ee3990fbad920, []int{1}
}

func (m *CipherBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CipherBlock.Unmarshal(m, b)
}
func (m *CipherBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CipherBlock.Marshal(b, m, deterministic)
}
func (m *CipherBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CipherBlock.Merge(m, src)
}
func (m *CipherBlock) XXX_Size() int {
	return xxx_messageInfo_CipherBlock.Size(m)
}
func (m *CipherBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_CipherBlock.DiscardUnknown(m)
}

var xxx_messageInfo_CipherBlock proto.InternalMessageInfo

func (m *CipherBlock) GetCipherContextId() string {
	if m != nil {
		return m.CipherContextId
	}
	return ""
}

func (m *CipherBlock) GetInitialValue() []byte {
	if m != nil {
		return m.InitialValue
	}
	return nil
}

func (m *CipherBlock) GetCipherData() []byte {
	if m != nil {
		return m.CipherData
	}
	return nil
}

func (m *CipherBlock) GetClearTextSha256() []byte {
	if m != nil {
		return m.ClearTextSha256
	}
	return nil
}

// This message will be filled with the
// credential details and encrypted across
//  wire for data in transit, by the controller
// for encryption
type CredentialBlock struct {
	Identity             string   `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CredentialBlock) Reset()         { *m = CredentialBlock{} }
func (m *CredentialBlock) String() string { return proto.CompactTextString(m) }
func (*CredentialBlock) ProtoMessage()    {}
func (*CredentialBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_665ee3990fbad920, []int{2}
}

func (m *CredentialBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CredentialBlock.Unmarshal(m, b)
}
func (m *CredentialBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CredentialBlock.Marshal(b, m, deterministic)
}
func (m *CredentialBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialBlock.Merge(m, src)
}
func (m *CredentialBlock) XXX_Size() int {
	return xxx_messageInfo_CredentialBlock.Size(m)
}
func (m *CredentialBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialBlock.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialBlock proto.InternalMessageInfo

func (m *CredentialBlock) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *CredentialBlock) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func init() {
	proto.RegisterEnum("CipherHashAlgorithm", CipherHashAlgorithm_name, CipherHashAlgorithm_value)
	proto.RegisterEnum("KeyExchangeScheme", KeyExchangeScheme_name, KeyExchangeScheme_value)
	proto.RegisterEnum("EncryptionScheme", EncryptionScheme_name, EncryptionScheme_value)
	proto.RegisterType((*CipherContext)(nil), "CipherContext")
	proto.RegisterType((*CipherBlock)(nil), "CipherBlock")
	proto.RegisterType((*CredentialBlock)(nil), "CredentialBlock")
}

func init() {
	proto.RegisterFile("acipherinfo.proto", fileDescriptor_665ee3990fbad920)
}

var fileDescriptor_665ee3990fbad920 = []byte{
	// 482 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x51, 0x6f, 0xd3, 0x3c,
	0x14, 0xfd, 0xd2, 0x0f, 0xc6, 0x7a, 0x97, 0x75, 0xa9, 0x87, 0x44, 0x85, 0x10, 0x54, 0x15, 0x42,
	0x55, 0x25, 0x12, 0xd1, 0xb2, 0xbe, 0x21, 0x91, 0x66, 0x81, 0x4e, 0x93, 0x86, 0x94, 0xa0, 0x3d,
	0xf0, 0x52, 0xb9, 0xce, 0x6d, 0x62, 0x2d, 0x8d, 0x2b, 0xc7, 0x1d, 0x2d, 0xff, 0x87, 0x7f, 0xc1,
	0x8f, 0x43, 0x71, 0x4a, 0x28, 0xe9, 0xde, 0x72, 0xcf, 0x39, 0xf7, 0xf8, 0xe6, 0xf8, 0x1a, 0xda,
	0x94, 0xf1, 0x55, 0x82, 0x92, 0x67, 0x0b, 0x61, 0xaf, 0xa4, 0x50, 0xa2, 0xf7, 0xab, 0x01, 0xa7,
	0x9e, 0x06, 0x3d, 0x91, 0x29, 0xdc, 0x28, 0xf2, 0x02, 0x9a, 0xac, 0xfc, 0xbc, 0x8a, 0x3a, 0x46,
	0xd7, 0xe8, 0x37, 0x83, 0xbf, 0x00, 0x79, 0x0f, 0x90, 0xd0, 0x3c, 0x09, 0x59, 0x82, 0x4b, 0xec,
	0x34, 0xba, 0x46, 0xbf, 0x35, 0x7c, 0x6a, 0x97, 0xb6, 0x53, 0x9a, 0x27, 0x6e, 0x1a, 0x0b, 0xc9,
	0x55, 0xb2, 0x0c, 0xf6, 0x74, 0xe4, 0x23, 0xb4, 0xef, 0x70, 0xeb, 0x6f, 0x58, 0x42, 0xb3, 0x18,
	0x77, 0xcd, 0xff, 0xeb, 0x66, 0x62, 0x5f, 0xd7, 0x99, 0xe0, 0x50, 0x4c, 0x3e, 0x80, 0x85, 0x19,
	0x93, 0xdb, 0x95, 0xe2, 0x22, 0xdb, 0x19, 0x3c, 0xd2, 0x06, 0x6d, 0xdb, 0xaf, 0x11, 0xc1, 0x81,
	0x94, 0xbc, 0x81, 0x56, 0x84, 0xf7, 0x9c, 0xa1, 0x87, 0x52, 0x15, 0x73, 0x76, 0x1e, 0x77, 0x8d,
	0xbe, 0x19, 0xd4, 0x50, 0x62, 0x03, 0x29, 0xfe, 0x55, 0x8a, 0x34, 0x45, 0x59, 0x69, 0x8f, 0xb4,
	0xf6, 0x01, 0xa6, 0xf7, 0xd3, 0x80, 0x93, 0x32, 0xbe, 0x49, 0x2a, 0xd8, 0x1d, 0xe9, 0xc3, 0x19,
	0xdb, 0x4f, 0xb3, 0x8a, 0xb0, 0x0e, 0x93, 0x1e, 0x98, 0x3c, 0xe3, 0x8a, 0xd3, 0xf4, 0x96, 0xa6,
	0xeb, 0x32, 0x4a, 0x33, 0xf8, 0x07, 0x23, 0x2f, 0x01, 0xca, 0xb6, 0x4b, 0xaa, 0xa8, 0xce, 0xcb,
	0x0c, 0xf6, 0x10, 0x7d, 0x5a, 0x8a, 0x54, 0x7e, 0xc5, 0x8d, 0x0a, 0x13, 0x3a, 0xbc, 0x18, 0xeb,
	0x4c, 0xcc, 0xa0, 0x0e, 0xf7, 0xae, 0xe0, 0xcc, 0x93, 0x18, 0x61, 0x56, 0x98, 0x97, 0xa3, 0x3e,
	0x87, 0x63, 0xae, 0x01, 0xb5, 0xdd, 0xcd, 0x58, 0xd5, 0x05, 0xb7, 0xa2, 0x79, 0xfe, 0x5d, 0xc8,
	0x48, 0x0f, 0xd6, 0x0c, 0xaa, 0x7a, 0x70, 0x0b, 0xe7, 0x0f, 0x5c, 0x37, 0x39, 0x85, 0xe6, 0xd4,
	0x0d, 0xa7, 0xb3, 0x9b, 0x2f, 0x37, 0xbe, 0xf5, 0x1f, 0x79, 0x06, 0xe7, 0xba, 0x0c, 0xa7, 0xee,
	0xf0, 0x62, 0x3c, 0x7b, 0x37, 0x9e, 0x6f, 0x15, 0xe6, 0x96, 0x51, 0x27, 0x46, 0xc3, 0x92, 0x68,
	0x0c, 0x1c, 0x68, 0x1f, 0x6c, 0x02, 0x31, 0xe1, 0xf8, 0xda, 0x77, 0xff, 0x98, 0xee, 0x2a, 0xdf,
	0xbb, 0x9c, 0x5a, 0xc6, 0x60, 0x04, 0x56, 0xfd, 0xe6, 0xc9, 0x09, 0x3c, 0x09, 0x2b, 0x39, 0x81,
	0x56, 0xe8, 0xce, 0x5c, 0x3f, 0x9c, 0x15, 0x27, 0x79, 0x9f, 0x26, 0x96, 0x31, 0xf9, 0x0c, 0xaf,
	0x98, 0x58, 0xda, 0x3f, 0x30, 0xc2, 0x88, 0xda, 0x2c, 0x15, 0xeb, 0xc8, 0x5e, 0xe7, 0x28, 0x8b,
	0x2d, 0x28, 0x9f, 0xc4, 0xb7, 0xd7, 0x31, 0x57, 0xc9, 0x7a, 0x6e, 0x33, 0xb1, 0x74, 0xd2, 0xc5,
	0x5b, 0x8c, 0x62, 0x74, 0xf0, 0x1e, 0x1d, 0xba, 0xe2, 0x4e, 0x2c, 0x1c, 0x26, 0xb2, 0x05, 0x8f,
	0xe7, 0x47, 0x5a, 0x3c, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xba, 0x71, 0x2e, 0x54, 0x03,
	0x00, 0x00,
}
