# rsyslog v5: load input modules
# If you do not load inputs, nothing happens!
# You may need to set the module load path if modules are not found.

set $/IMGP = getenv("IMGP");

#$ModLoad imklog.so # kernel logging (formerly provided by rklogd)
#module(load="imuxsock" SysSock.Name="/dev/log")
#module(load="imtcp" MaxSessions="500")
#input(type="imtcp" address="127.0.0.1" port="514")
module(load="mmjsonparse")

# default permissions for all log files.
$FileOwner root
$FileGroup adm
$FileCreateMode 0640
$DirCreateMode 0755
$Umask 0022


global(workDirectory="/")
template(name="allJsonLogTemplate"
  type="list") {
  constant(value="{ ")
  constant(value="\"pname\":\"")
  property(name="programname")
  constant(value="\",")
  property(name="$!all-json" position.from="2")
}

template(name="jsonOutput" type="list" option.jsonf="on") {
  property(outname="pname" name="programname" format="jsonf")
  property(outname="hostname" name="hostname" format="jsonf")
  property(outname="level" name="$!level" format="jsonf")
  property(outname="msg" name="$!msg" format="jsonf")
  property(outname="file" name="$!file" format="jsonf")
  property(outname="func" name="$!func" format="jsonf")
  property(outname="time" name="$!time" format="jsonf")
  property(outname="partition" name="$/IMGP" format="jsonf")
}

template(name="nonJsonOutput" type="list" option.jsonf="on") {
  property(outname="pname" name="programname" format="jsonf")
  property(outname="hostname" name="hostname" format="jsonf")
  property(outname="timestamp" name="timereported" format="jsonf")
  property(outname="level" name="syslogpriority-text" format="jsonf")
  property(outname="msg" name="$!msg" format="jsonf")
  property(outname="partition" name="$/IMGP" format="jsonf")
}

action(type="mmjsonparse" cookie="")
$outchannel log_rotation,/persist/log/fail.log,52428800,/persist/log_rotation_script
$outchannel dnsmasq_rotation,/persist/log/dnsmasq.log,5242880,/persist/dnsmasq_rotation_script
if $parsesuccess == "FAIL" then {
#action(type="omfile" file="/persist/log/fail.log")
  if $programname == "dnsmasq" then {
    *.* :omfile:$dnsmasq_rotation;nonJsonOutput
  } else {
    *.* :omfile:$log_rotation;nonJsonOutput
  }
  stop
}

# More configuration examples:
#
# Remote Logging (we use TCP for reliable delivery)
# An on-disk queue is created for this action. If the remote host is
# down, messages are spooled to disk and sent when it is up again.
#$WorkDirectory /persist/rsyslog # where to place spool files
#$ActionQueueFileName uniqName # unique name prefix for spool files
#$ActionQueueMaxDiskSpace 1g   # 1gb space limit (use as much as possible)
#$ActionQueueSaveOnShutdown on # save messages to disk on shutdown
#$ActionQueueType LinkedList   # run asynchronously
#$ActionResumeRetryCount -1    # infinety retries if host is down
#$ActionResumeInterval 30      # retry interval
# remote host is: name/ip:port, e.g. 192.168.0.1:514, port optional
#*.* @@127.0.0.1:5140
*.* action(type="omfile" file="/var/log/test.log"
        template="jsonOutput" queue.filename="json_queue"
        queue.type="LinkedList" action.resumeRetryCount="-1"
        queue.saveOnShutdown="on")
