From f9ba0da534acf6d0b1cb7a2f4ca0c78af231c235 Mon Sep 17 00:00:00 2001
From: Allan Jude <allan@klarasystems.com>
Date: Tue, 16 Nov 2021 23:29:06 +0000
Subject: [PATCH 7/7] spa_get_worst_case_asize: calculate RAID-Z inflation
 correctly

Rather than just multiplying the logical size by the minimum
RAID-Z allocation size, we round the lsize up to the next
multiple of the worst-case minimum allocation size.

Then multiply that by the number of copies.

This replaces spa_asize_inflation which always assumed the worst case

Sponsored-by: Zededa Inc.
Sponsored-by: Klara Inc.
Signed-off-by: Allan Jude <allan@klarasystems.com>
---
 include/sys/spa.h       |  3 ++-
 module/zfs/dmu_objset.c |  2 +-
 module/zfs/dmu_tx.c     |  3 ++-
 module/zfs/spa_misc.c   | 16 +++++++++++++---
 4 files changed, 18 insertions(+), 6 deletions(-)

diff --git a/include/sys/spa.h b/include/sys/spa.h
index 532926e12..7132a271a 100644
--- a/include/sys/spa.h
+++ b/include/sys/spa.h
@@ -1043,7 +1043,8 @@ extern uint64_t spa_version(spa_t *spa);
 extern pool_state_t spa_state(spa_t *spa);
 extern spa_load_state_t spa_load_state(spa_t *spa);
 extern uint64_t spa_freeze_txg(spa_t *spa);
-extern uint64_t spa_get_worst_case_asize(spa_t *spa, uint64_t lsize);
+extern uint64_t spa_get_worst_case_asize(spa_t *spa, objset_t *os,
+    uint64_t lsize);
 extern uint64_t spa_get_dspace(spa_t *spa);
 extern uint64_t spa_get_checkpoint_space(spa_t *spa);
 extern uint64_t spa_get_slop_space(spa_t *spa);
diff --git a/module/zfs/dmu_objset.c b/module/zfs/dmu_objset.c
index af107fb8a..bd7f7c151 100644
--- a/module/zfs/dmu_objset.c
+++ b/module/zfs/dmu_objset.c
@@ -2993,7 +2993,7 @@ void
 dmu_objset_willuse_space(objset_t *os, int64_t space, dmu_tx_t *tx)
 {
 	dsl_dataset_t *ds = os->os_dsl_dataset;
-	int64_t aspace = spa_get_worst_case_asize(os->os_spa, space);
+	int64_t aspace = spa_get_worst_case_asize(os->os_spa, os, space);
 
 	if (ds != NULL) {
 		dsl_dir_willuse_space(ds->ds_dir, aspace, tx);
diff --git a/module/zfs/dmu_tx.c b/module/zfs/dmu_tx.c
index 10e26bbff..6b369d558 100644
--- a/module/zfs/dmu_tx.c
+++ b/module/zfs/dmu_tx.c
@@ -957,7 +957,8 @@ dmu_tx_try_assign(dmu_tx_t *tx, uint64_t txg_how)
 	}
 
 	/* needed allocation: worst-case estimate of write space */
-	uint64_t asize = spa_get_worst_case_asize(tx->tx_pool->dp_spa, towrite);
+	uint64_t asize = spa_get_worst_case_asize(tx->tx_pool->dp_spa,
+	    tx->tx_objset, towrite);
 	/* calculate memory footprint estimate */
 	uint64_t memory = towrite + tohold;
 
diff --git a/module/zfs/spa_misc.c b/module/zfs/spa_misc.c
index 6bc7e5dd2..9da813822 100644
--- a/module/zfs/spa_misc.c
+++ b/module/zfs/spa_misc.c
@@ -35,6 +35,7 @@
 #include <sys/zio_checksum.h>
 #include <sys/zio_compress.h>
 #include <sys/dmu.h>
+#include <sys/dmu_objset.h>
 #include <sys/dmu_tx.h>
 #include <sys/zap.h>
 #include <sys/zil.h>
@@ -1761,12 +1762,21 @@ spa_freeze_txg(spa_t *spa)
  * block anyway.
  */
 uint64_t
-spa_get_worst_case_asize(spa_t *spa, uint64_t lsize)
+spa_get_worst_case_asize(spa_t *spa, objset_t *os, uint64_t lsize)
 {
+	ASSERT3U(spa->spa_worst_alloc, >, 0);
 	if (lsize == 0)
 		return (0);	/* No inflation needed */
-	return (MAX(lsize, 1 << spa->spa_max_ashift)
-	    * MIN(spa->spa_worst_alloc, spa_asize_inflation));
+
+	uint64_t inflation = roundup(lsize, (1 << spa->spa_max_ashift) *
+	    spa->spa_worst_alloc);
+
+	if (os != NULL && os->os_copies > 0)
+		inflation *= os->os_copies;
+	else
+		inflation *= SPA_DVAS_PER_BP;
+
+	return (inflation);
 }
 
 /*
-- 
2.25.1

